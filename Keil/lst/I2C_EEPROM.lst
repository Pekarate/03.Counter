C51 COMPILER V9.60.7.0   I2C_EEPROM                                                        06/25/2023 16:37:22 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE I2C_EEPROM
OBJECT MODULE PLACED IN .\Output\I2C_EEPROM.obj
COMPILER INVOKED BY: D:\00.SOFTWARE\03.KeilcC51\C51\BIN\C51.EXE ..\I2C_EEPROM.c LARGE OMF2 OPTIMIZE(7,SPEED) BROWSE INCD
                    -IR(..\..\..\..\Library\Device\Include;..\..\..\..\Library\StdDriver\inc) DEBUG PRINT(.\lst\I2C_EEPROM.lst) TABS(2) OBJEC
                    -T(.\Output\I2C_EEPROM.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2020 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          
   8          
   9          //********************************************************************************************************
             -***
  10          //  File Function: MS51 I2C demo code, Slave Address of 24LC64 = 0xA0
  11          //
  12          //   ____________           ______________ 
  13          //  |            |   SDA    |             |
  14          //  |            |<-------->|             |
  15          //  |            |          |             |
  16          //  | MS51       |          |   24LC64(S) |
  17          //  |            |   SCL    |             |
  18          //  |            |--------->|             |
  19          //  |____________|          |_____________|
  20          //
  21          //  Microchip I2C EEPROM 24xx64 (64K Bit) is used as the slave device.  
  22          //  The page size are 32Byte. Total are 256 page.
  23          //  If verification passes, Port3 will show 0x78. If there is any failure
  24          //  occured during the progress, Port3 will show 0x00.
  25          //********************************************************************************************************
             -***
  26          
  27          #include "MS51_16K.H"
  28          
  29          //#define  print_function
  30          
  31          #define SYS_DIV                 1
  32          #define I2C_CLOCK               39                 /* Setting I2C clock as 100K */
  33          
  34          #define EEPROM_SLA              0xC0
  35          #define EEPROM_WR               0
  36          #define EEPROM_RD               1
  37          
  38          #define LED                     P3
  39          #define EEPROM_PAGE_SIZE               32
  40          #define PAGE_NUMBER             4
  41          
  42          #define ERROR_CODE              0x78
  43          #define TEST_OK                 0x00
  44          
  45          bit I2C_Reset_Flag;
C51 COMPILER V9.60.7.0   I2C_EEPROM                                                        06/25/2023 16:37:22 PAGE 2   

  46          //========================================================================================================
  47          void Init_I2C(void)
  48          {
  49   1          P13_OPENDRAIN_MODE;          // Modify SCL pin to Open drain mode. don't forget the pull high resister
             - in circuit
  50   1          P14_OPENDRAIN_MODE;          // Modify SDA pin to Open drain mode. don't forget the pull high resister
             - in circuit
  51   1        
  52   1          /* Set I2C clock rate */
  53   1          I2CLK = I2C_CLOCK; 
  54   1      
  55   1          /* Enable I2C */
  56   1          set_I2CON_I2CEN;                                   
  57   1      }
  58          //========================================================================================================
  59          void I2C_SI_Check(void)
  60          {
  61   1          if (I2STAT == 0x00)
  62   1          {
  63   2              I2C_Reset_Flag = 1;
  64   2              set_I2CON_STO;
  65   2              SI = 0;
  66   2              if(SI)
  67   2              {
  68   3                  clr_I2CON_I2CEN;
  69   3                  set_I2CON_I2CEN;
  70   3              }   
  71   2          }  
  72   1      }
  73          //========================================================================================================
  74          UINT8 VCNL36821_Write_register(UINT8 reg,UINT8 u8low,UINT8 u8high)
  75          {
  76   1          /* Step1 */
  77   1          set_I2CON_STA;                                /* Send Start bit to I2C EEPROM */         
  78   1          clr_I2CON_SI;
  79   1          while (!SI);
  80   1          if (I2STAT != 0x08)                     /* 0x08:  A START condition has been transmitted*/
  81   1          {
  82   2              I2C_Reset_Flag = 1;
  83   2      #ifdef print_function
                      printf("\nI2C 'Send STA' error");
              #endif
  86   2              goto Write_Error_Stop;
  87   2          }
  88   1      
  89   1          /* Step2 */
  90   1          clr_I2CON_STA;                                /* Clear STA and Keep SI value in I2CON */
  91   1          I2DAT = EEPROM_SLA | EEPROM_WR;         /* Send (SLA+W) to EEPROM */
  92   1          clr_I2CON_SI;
  93   1          while (!SI);
  94   1          if (I2STAT != 0x18)                     /* 0x18: SLA+W has been transmitted; ACK has been received */ 
             -            
  95   1          {
  96   2              I2C_Reset_Flag = 1;
  97   2      #ifdef print_function
                      printf("\nI2C 'Send SLA+W' error");
              #endif
 100   2              goto Write_Error_Stop;
 101   2          }
 102   1      
 103   1          /* Step3 */
 104   1          I2DAT = reg;             /* Send EEPROM's High Byte Address */
C51 COMPILER V9.60.7.0   I2C_EEPROM                                                        06/25/2023 16:37:22 PAGE 3   

 105   1          clr_I2CON_SI;
 106   1          while (!SI);
 107   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */
 108   1          {
 109   2              I2C_Reset_Flag = 1;
 110   2      #ifdef print_function
                      printf("\nI2C 'Send High byte address' error");
              #endif
 113   2              goto Write_Error_Stop;
 114   2          }
 115   1          
 116   1          /* Step3 */
 117   1          I2DAT = u8low;             /* Send EEPROM's High Byte Address */
 118   1          clr_I2CON_SI;
 119   1          while (!SI);
 120   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */
 121   1          {
 122   2              I2C_Reset_Flag = 1;
 123   2      #ifdef print_function
                      printf("\nI2C 'Send High byte address' error");
              #endif
 126   2              goto Write_Error_Stop;
 127   2          }
 128   1      
 129   1          /* Step4 */
 130   1          I2DAT = u8high;             /* Send EEPROM's Low Byte Address */
 131   1          clr_I2CON_SI;
 132   1          while (!SI);
 133   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */
 134   1          {
 135   2              I2C_Reset_Flag = 1;
 136   2      #ifdef print_function
                      printf("\nI2C 'Send Low byte address' error");
              #endif
 139   2              goto Write_Error_Stop;
 140   2          }
 141   1          /* Step7 */
 142   1          set_I2CON_STO;                                /* Set STOP Bit to I2C EEPROM */
 143   1          clr_I2CON_SI;
 144   1          while (STO)                        /* Check STOP signal */
 145   1          {
 146   2            I2C_SI_Check();
 147   2            if (I2C_Reset_Flag)
 148   2              goto Write_Error_Stop;
 149   2          }
 150   1          
 151   1      Write_Error_Stop: 
 152   1          if (I2C_Reset_Flag)
 153   1          {
 154   2              I2C_SI_Check();
 155   2              I2C_Reset_Flag  = 0;
 156   2      #ifdef print_function
                      printf("\nI2C Write error, test stop");
              #endif
 159   2            return 0;
 160   2          }
 161   1          return 1;
 162   1          
 163   1          
C51 COMPILER V9.60.7.0   I2C_EEPROM                                                        06/25/2023 16:37:22 PAGE 4   

 164   1      }
 165          //========================================================================================================
 166          
 167          UINT8 VCNL36821_Read_register(UINT8 command,UINT8 *u8DAT)
 168          {
 169   1          UINT8  u8Count;
 170   1          /* Step1 */
 171   1          set_I2CON_STA;                                /* Send Start bit to I2C EEPROM */
 172   1          clr_I2CON_SI;
 173   1          while (!SI);
 174   1          if (I2STAT != 0x08)                     /* 0x08:  A START condition has been transmitted*/
 175   1          {
 176   2              I2C_Reset_Flag = 1;
 177   2      #ifdef print_function
                      printf("\nI2C 'Send STA' error");
              #endif
 180   2              goto Read_Error_Stop;
 181   2          }
 182   1      
 183   1          /* Step2 */
 184   1          I2DAT = (EEPROM_SLA | EEPROM_WR);       /* Send (SLA+W) to EEPROM */
 185   1          clr_I2CON_STA;                                /* Clear STA and Keep SI value in I2CON */    
 186   1          clr_I2CON_SI;
 187   1          while (!SI);
 188   1          if (I2STAT != 0x18)                     /* 0x18: SLA+W has been transmitted; ACK has been received */ 
             -             
 189   1          {
 190   2              I2C_Reset_Flag = 1;
 191   2      #ifdef print_function
                      printf("\nI2C 'Send SLA+W' error");
              #endif
 194   2              goto Read_Error_Stop;
 195   2          }
 196   1      
 197   1          /* Step3 */
 198   1          I2DAT = command;             /* Send I2C EEPROM's High Byte Address */
 199   1          clr_I2CON_SI;
 200   1          while (!SI);
 201   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */              
 202   1          {
 203   2              I2C_Reset_Flag = 1;
 204   2      #ifdef print_function
                      printf("\nI2C 'Send I2C High Byte Address' error");
              #endif
 207   2              goto Read_Error_Stop;
 208   2          }
 209   1          /* Step5 */
 210   1          set_I2CON_STA;                                /* Repeated START */
 211   1          clr_I2CON_SI; 
 212   1          while (!SI);
 213   1          if (I2STAT != 0x10)                     /* 0x10: A repeated START condition has been transmitted */
 214   1          {
 215   2              I2C_Reset_Flag = 1;
 216   2      #ifdef print_function
                      printf("\nI2C 'Send STA' error");
              #endif
 219   2              goto Read_Error_Stop;
 220   2          }
 221   1      
 222   1          /* Step6 */
 223   1          clr_I2CON_STA;                                /* Clear STA and Keep SI value in I2CON */
C51 COMPILER V9.60.7.0   I2C_EEPROM                                                        06/25/2023 16:37:22 PAGE 5   

 224   1          I2DAT = (EEPROM_SLA | EEPROM_RD);       /* Send (SLA+R) to EEPROM */
 225   1          clr_I2CON_SI;
 226   1          while (!SI);
 227   1          if (I2STAT != 0x40)                     /* 0x40:  SLA+R has been transmitted; ACK has been received */
             -              
 228   1          {
 229   2              I2C_Reset_Flag = 1;
 230   2      #ifdef print_function
                      printf("\nI2C 'Send SLA+R' error");
              #endif
 233   2              goto Read_Error_Stop;
 234   2          }
 235   1      
 236   1          /* Step7 */                             /* Verify I2C EEPROM data */
 237   1          for (u8Count = 0; u8Count <2; u8Count++)
 238   1          {
 239   2              set_I2CON_AA;                             /* Set Assert Acknowledge Control Bit */
 240   2              clr_I2CON_SI;
 241   2              while (!SI);
 242   2              if (I2STAT != 0x50)                 /* 0x50:Data byte has been received; NOT ACK has been returned
             - */              
 243   2              {
 244   3                  I2C_Reset_Flag = 1;
 245   3      #ifdef print_function
                          printf("\nI2C 'No Ack' error");
              #endif
 248   3                  goto Read_Error_Stop;
 249   3              }
 250   2             u8DAT[u8Count] = I2DAT;
 251   2          }
 252   1          /* Step8 */
 253   1          clr_I2CON_AA;                                 /* Send a NACK to disconnect 24xx64 */
 254   1          clr_I2CON_SI;
 255   1          while (!SI);
 256   1          if (I2STAT != 0x58)                     /* 0x58:Data byte has been received; ACK has been returned */
 257   1          {
 258   2              I2C_Reset_Flag = 1;
 259   2      #ifdef print_function
                      printf("\nI2C 'Ack' error");
              #endif
 262   2              goto Read_Error_Stop;
 263   2          }
 264   1          
 265   1        /* Step9 */    
 266   1          clr_I2CON_SI;
 267   1          set_I2CON_STO;
 268   1          while (STO)                        /* Check STOP signal */
 269   1          {
 270   2            I2C_SI_Check();
 271   2            if (I2C_Reset_Flag)
 272   2              goto Read_Error_Stop;
 273   2          }
 274   1          
 275   1      Read_Error_Stop: 
 276   1          if (I2C_Reset_Flag)
 277   1          {
 278   2              I2C_SI_Check();
 279   2              I2C_Reset_Flag = 0;
 280   2              return 0;
 281   2          }
 282   1          return 1;
 283   1      }
C51 COMPILER V9.60.7.0   I2C_EEPROM                                                        06/25/2023 16:37:22 PAGE 6   

 284          #define PS_CONF4 0x04
 285          
 286          UINT16 valueps;
 287          UINT16 count =0;
 288          
 289          UINT8 readWord(UINT8 tmpreg, volatile UINT16 *rdata)
 290          {
 291   1      
 292   1       UINT8 u8data[2];
 293   1       UINT8 res = VCNL36821_Read_register(tmpreg,u8data);
 294   1       *rdata = u8data[1];
 295   1       *rdata = (*rdata  *256) + u8data[0];
 296   1       return res;
 297   1      }
 298          
 299          UINT8 writeWord(UINT8 reg, UINT16 rdata)
 300          {
 301   1        return VCNL36821_Write_register(reg,(UINT8)rdata,(UINT8)(rdata >> 8));
 302   1      }
 303          #define VCNL36821S_ADDRESS          0x60
 304          #define VCNL36821S_WHO_AM_I         0x26
 305          
 306          #define VCNL36821S_REG_PS_CONF1     0x00
 307          #define VCNL36821S_REG_PS_CONF2     0x03
 308          #define VCNL36821S_REG_PS_CONF3     0x04
 309          #define VCNL36821S_REG_PS_THDL      0x05
 310          #define VCNL36821S_REG_PS_THDH      0x06
 311          #define VCNL36821S_REG_PS_CANC      0x07
 312          #define VCNL36821S_REG_PS_CONF4     0x08
 313          #define VCNL36821S_REG_PS_DATA      0xF8
 314          #define VCNL36821S_REG_INT_FLAG     0xF9
 315          #define VCNL36821S_REG_ID           0xFA
 316          #define VCNL36821S_REG_PS_AC_DATA   0xFB
 317          
 318          // PS_CONF1
 319          #define VCNL36821S_PS_ON            (1 << 1)
 320          #define VCNL36821S_PS_IINT           (1 << 7)
 321          // PS_CONF2
 322          #define VCNL36821S_PS_ST            (1 << 0)
 323          #define VCNL36821S_PS_SMART_PERS    (1 << 1)
 324          #define VCNL36821S_PS_INT_SHIFT     2
 325          #define VCNL36821S_PS_INT_MASK      (0x3 << VCNL36821S_PS_INT_SHIFT)
 326          #define VCNL36821S_PS_INT_DISABLE   (PS_INT_DISABLE << VCNL36821S_PS_INT_SHIFT)
 327          #define VCNL36821S_PS_INT_CLOSING   (PS_INT_CLOSING << VCNL36821S_PS_INT_SHIFT)
 328          #define VCNL36821S_PS_INT_AWAY      (PS_INT_AWAY << VCNL36821S_PS_INT_SHIFT)
 329          #define VCNL36821S_PS_INT_BOTH      (PS_INT_BOTH << VCNL36821S_PS_INT_SHIFT)
 330          #define VCNL36821S_PS_PERS_SHIFT    4
 331          #define VCNL36821S_PS_PERS_MASK     (0x3 << VCNL36821S_PS_PERS_SHIFT)
 332          #define VCNL36821S_PS_PERS_1        (0x0 << VCNL36821S_PS_PERS_SHIFT)
 333          #define VCNL36821S_PS_PERS_2        (0x1 << VCNL36821S_PS_PERS_SHIFT)
 334          #define VCNL36821S_PS_PERS_3        (0x2 << VCNL36821S_PS_PERS_SHIFT)
 335          #define VCNL36821S_PS_PERS_4        (0x3 << VCNL36821S_PS_PERS_SHIFT)
 336          #define VCNL36821S_PS_PERIOD_SHIFT  6
 337          #define VCNL36821S_PS_PERIOD_MASK   (0x3 << VCNL36821S_PS_PERIOD_SHIFT)
 338          #define VCNL36821S_PS_PERIOD_10ms   (0x0 << VCNL36821S_PS_PERIOD_SHIFT)
 339          #define VCNL36821S_PS_PERIOD_20ms   (0x1 << VCNL36821S_PS_PERIOD_SHIFT)
 340          #define VCNL36821S_PS_PERIOD_40ms   (0x2 << VCNL36821S_PS_PERIOD_SHIFT)
 341          #define VCNL36821S_PS_PERIOS_80ms   (0x3 << VCNL36821S_PS_PERIOD_SHIFT)
 342          #define VCNL36821S_PS_HG            (1 << 10)
 343          #define VCNL36821S_PS_ITB           (1 << 11)
 344          #define VCNL36821S_PS_MPS_SHIFT     12
 345          #define VCNL36821S_PS_MPS_MASK      (0x03 << VCNL36821S_PS_MPS_SHIFT)
C51 COMPILER V9.60.7.0   I2C_EEPROM                                                        06/25/2023 16:37:22 PAGE 7   

 346          #define VCNL36821S_PS_MPS_1P        (0x0 << VCNL36821S_PS_MPS_SHIFT)
 347          #define VCNL36821S_PS_MPS_2P        (0x1 << VCNL36821S_PS_MPS_SHIFT)
 348          #define VCNL36821S_PS_MPS_4P        (0x2 << VCNL36821S_PS_MPS_SHIFT)
 349          #define VCNL36821S_PS_MPS_8P        (0x3 << VCNL36821S_PS_MPS_SHIFT)
 350          #define VCNL36821S_PS_IT_SHIFT      14
 351          #define VCNL36821S_PS_IT_MASK       (0x3 << VCNL36821S_PS_IT_SHIFT)
 352          #define VCNL36821S_PS_IT_1T         (0x0 << VCNL36821S_PS_IT_SHIFT)
 353          #define VCNL36821S_PS_IT_2T         (0x1 << VCNL36821S_PS_IT_SHIFT)
 354          #define VCNL36821S_PS_IT_4T         (0x2 << VCNL36821S_PS_IT_SHIFT)
 355          #define VCNL36821S_PS_IT_8T         (0x3 << VCNL36821S_PS_IT_SHIFT)
 356          // PS_CONF3
 357          #define VCNL36821S_PS_SP_INT        (1 << 2)
 358          #define VCNL36821S_PS_FORCENUM      (1 << 4)
 359          #define VCNL36821S_PS_TRIG          (1 << 5)
 360          #define VCNL36821S_PS_AF            (1 << 6)
 361          #define VCNL36821S_PS_I_VCSEL_SHIFT 8
 362          #define VCNL36821S_PS_I_VCSEL_MASK  (0xF << VCNL36821S_PS_I_VCSEL_SHIFT)
 363          #define VCNL36821S_PS_HD            (1 << 12)
 364          #define VCNL36821S_PS_SC            (0x7 << 13)
 365          // PS_CONF4
 366          #define VCNL36821S_PS_AC_INT        (1 << 0)
 367          #define VCNL36821S_PS_AC_TRIG       (1 << 2)
 368          #define VCNL36821S_PS_AC            (1 << 3)
 369          #define VCNL36821S_PS_AC_NUM_SHIFT  4
 370          #define VCNL36821S_PS_AC_NUM_MASK   (0x3 << VCNL36821S_PS_AC_NUM_SHIFT)
 371          #define VCNL36821S_PS_AC_NUM_1      (0x0 << VCNL36821S_PS_AC_NUM_SHIFT)
 372          #define VCNL36821S_PS_AC_NUM_2      (0x1 << VCNL36821S_PS_AC_NUM_SHIFT)
 373          #define VCNL36821S_PS_AC_NUM_4      (0x2 << VCNL36821S_PS_AC_NUM_SHIFT)
 374          #define VCNL36821S_PS_AC_NUM_8      (0x3 << VCNL36821S_PS_AC_NUM_SHIFT)
 375          #define VCNL36821S_PS_AC_PERIOD_SHIFT 6
 376          #define VCNL36821S_PS_AC_PERIOD_MASK  (0x3 << VCNL36821S_PS_AC_PERIOD_SHIFT)
 377          #define VCNL36821S_PS_AC_PERIOD_3ms   (0x0 << VCNL36821S_PS_AC_PERIOD_SHIFT)
 378          #define VCNL36821S_PS_AC_PERIOD_6ms   (0x1 << VCNL36821S_PS_AC_PERIOD_SHIFT)
 379          #define VCNL36821S_PS_AC_PERIOD_12ms  (0x2 << VCNL36821S_PS_AC_PERIOD_SHIFT)
 380          #define VCNL36821S_PS_AC_PERIOD_24ms  (0x3 << VCNL36821S_PS_AC_PERIOD_SHIFT)
 381          #define VCNL36821S_PS_LPPER_SHIFT   9
 382          #define VCNL36821S_PS_LPPER_MASK    (0x3 << VCNL36821S_PS_LPPER_SHIFT)
 383          #define VCNL36821S_PS_LPPER_40ms    (0x0 << VCNL36821S_PS_LPPER_SHIFT)
 384          #define VCNL36821S_PS_LPPER_80ms    (0x1 << VCNL36821S_PS_LPPER_SHIFT)
 385          #define VCNL36821S_PS_LPPER_160ms   (0x2 << VCNL36821S_PS_LPPER_SHIFT)
 386          #define VCNL36821S_PS_LPPER_320ms   (0x3 << VCNL36821S_PS_LPPER_SHIFT)
 387          
 388          // PS_AC_DATA
 389          #define PS_AC_DATA_AC_BUSY          (1 << 15)
 390          #define PS_AC_DATA_AC_SUN           (1 << 14)
 391          
 392          // Defaults
 393          #define VCNL36821S_DEFAULT_PS_CONF1 (0x0201 | \
 394                                               VCNL36821S_PS_ON | \
 395                                               VCNL36821S_PS_IINT)
 396          #define VCNL36821S_DEFAULT_PS_CONF2 (VCNL36821S_PS_IT_8T | \
 397                                               VCNL36821S_PS_MPS_1P)
 398          #define VCNL36821S_DEFAULT_PS_CONF3 (0x0008)
 399          #define VCNL36821S_DEFAULT_PS_CONF4 (0x080F)
 400          #define VCNL36821S_DEFAULT_PS_CANC  0x0000
 401          #define VCNL36821S_DEFAULT_PS_THDL  0x0000
 402          #define VCNL36821S_DEFAULT_PS_THDH  0x0FFF
 403          
 404           
 405          #define   PS_I_VCSEL_50mA  8
 406          #define   PS_I_VCSEL_66mA  9
 407          #define   PS_I_VCSEL_82mA  10
C51 COMPILER V9.60.7.0   I2C_EEPROM                                                        06/25/2023 16:37:22 PAGE 8   

 408          #define   PS_I_VCSEL_98mA  11
 409              
 410          UINT8 bitsUpdate(UINT8 reg, UINT16 mask, UINT16 update)
 411          {
 412   1        UINT16 value;
 413   1        
 414   1        if (!readWord(reg, &value))
 415   1        {
 416   2          return 0;
 417   2        }
 418   1        value &= mask;
 419   1        value |= update;
 420   1        return writeWord(reg, value);
 421   1      }
 422          
 423          UINT8 set_PS_I_VCSEL(UINT8 i_vcsel)
 424          {
 425   1        return bitsUpdate(VCNL36821S_REG_PS_CONF3,~VCNL36821S_PS_I_VCSEL_MASK,i_vcsel << VCNL36821S_PS_I_VCSEL_S
             -HIFT);
 426   1      }
 427          
 428          int VCNL36821S_begin(void)
 429          {
 430   1      
 431   1        UINT16 id; 
 432   1        // Prevent I2C bus lockup
 433   1      //  writeWord(VCNL36821S_REG_PS_THDL, 0x0);
 434   1      //  writeWord(VCNL36821S_REG_PS_THDL, 0x0);
 435   1        
 436   1        if (!readWord(VCNL36821S_REG_ID, &id) || (id & 0xFF) != VCNL36821S_WHO_AM_I)
 437   1        {  
 438   2          return 0;
 439   2        }
 440   1        
 441   1          // Initialization
 442   1        if (writeWord(VCNL36821S_REG_PS_CONF1, 0x0001) &&
 443   1            writeWord(VCNL36821S_REG_PS_CONF2, 0x0001) &&
 444   1            writeWord(VCNL36821S_REG_PS_CONF3, VCNL36821S_DEFAULT_PS_CONF3) &&
 445   1            writeWord(VCNL36821S_REG_PS_THDL, VCNL36821S_DEFAULT_PS_THDL) &&
 446   1            writeWord(VCNL36821S_REG_PS_THDH, VCNL36821S_DEFAULT_PS_THDH) &&
 447   1            writeWord(VCNL36821S_REG_PS_CANC, VCNL36821S_DEFAULT_PS_CANC) &&
 448   1            writeWord(VCNL36821S_REG_PS_CONF4, VCNL36821S_DEFAULT_PS_CONF4))
 449   1        {
 450   2          Timer3_Delay(16000000,16,400,10); //10ms
 451   2      //    return 0; 
 452   2        }
 453   1        else
 454   1        {
 455   2          return 0;
 456   2        }
 457   1        
 458   1      //      // Power On sequences
 459   1      //  if (// (1). PS_ST = 1
 460   1      //      writeWord(VCNL36821S_REG_PS_CONF1, 0x0201);
 461   1      //      writeWord(VCNL36821S_REG_PS_CONF2, VCNL36821S_PS_ST);
 462   1            // (2). PS_ON = 1, PS_INT = 1
 463   1            writeWord(VCNL36821S_REG_PS_CONF1, 0x0001 | VCNL36821S_PS_ON );
 464   1            Timer3_Delay(16000000,16,400,100); //10ms
 465   1            // (2). PS_ON = 1, PS_INT = 1
 466   1            writeWord(VCNL36821S_REG_PS_CONF1, 0x0001 | VCNL36821S_PS_ON | VCNL36821S_PS_IINT);
 467   1            Timer3_Delay(16000000,16,400,100); //10ms
 468   1            writeWord(VCNL36821S_REG_PS_CONF1, 0x00201 | VCNL36821S_PS_ON | VCNL36821S_PS_IINT);
C51 COMPILER V9.60.7.0   I2C_EEPROM                                                        06/25/2023 16:37:22 PAGE 9   

 469   1            Timer3_Delay(16000000,16,400,100); //10ms
 470   1            // (3). PS_ST = 0
 471   1            writeWord(VCNL36821S_REG_PS_CONF2, 0xC0C0);
 472   1      //  {
 473   1      //    return 0;
 474   1      //  }
 475   1      
 476   1      
 477   1      
 478   1      
 479   1        return 1;
 480   1      }
 481          
 482          
 483          #define LCD_PWM_ON  P05 =1
 484          #define LCD_PWM_OFF P05 =0
 485          
 486          #define LCD_SCK_HIGH P04 =1
 487          #define LCD_SCK_LOW  P04 =0
 488          
 489          #define LCD_LAT_HIGH  P03 =1
 490          #define LCD_LAT_LOW  P03 =0
 491          
 492          #define LCD_DATA      P01
 493          #define LCD_DATA_HIGH  P01 =1
 494          #define LCD_DATA_LOW  P01=0
 495          
 496          void LCD_INIT()
 497          {
 498   1        // P05 LCD_PW out
 499   1        // P04 LCD_SCK out
 500   1        // P03 LCD_LAT out
 501   1        // P01 LCD_DATA out
 502   1        P0M1 &=  0xC5;//0b11000101;
 503   1        P0M2 |=  ~0xC5;//0b00111010;
 504   1        LCD_PWM_ON;
 505   1        LCD_SCK_LOW;
 506   1        LCD_LAT_LOW;
 507   1      }
 508          void LCD_Delay(UINT8 dl)
 509          {
 510   1        int i;
 511   1        for( i =0;i<dl;i++)
 512   1        {
 513   2        }
 514   1      }
 515          UINT8 LCD_CODE[] ={0x7E,0x48,0x3D,0x6D,0x4B,0x67,0x77,0x4C,0x7F,0x6F,0x5F,0x00,0x00,0x00,0x00,0x00};
 516          #define LCD_DOT  0x80
 517          void LCD_send_bytes(UINT8 *dt)
 518          {
 519   1        INT8 i, j;
 520   1        LCD_LAT_LOW;
 521   1        for(i =2;i>=0;i--)
 522   1        {
 523   2          for(j =7;j>=0;j--)
 524   2          {
 525   3            LCD_SCK_LOW;
 526   3            LCD_DATA = ((dt[i] >> j) &0x01);
 527   3            LCD_Delay(5);
 528   3            LCD_SCK_HIGH;
 529   3            LCD_Delay(5);
 530   3          }
C51 COMPILER V9.60.7.0   I2C_EEPROM                                                        06/25/2023 16:37:22 PAGE 10  

 531   2        }
 532   1        LCD_LAT_HIGH;
 533   1        LCD_Delay(5);
 534   1        LCD_LAT_LOW;
 535   1      }
 536          
 537          typedef enum {
 538            SYS_MODE_A =0,
 539            SYS_MODE_B
 540          }_Sys_Mode;
 541          _Sys_Mode Sys_Mode = SYS_MODE_B;
 542          void LCD_show(UINT16 count)
 543          {
 544   1        UINT8 lcd_data[3];
 545   1        if(Sys_Mode == SYS_MODE_A){
 546   2          count = (count % 198);
 547   2          lcd_data[0] = LCD_CODE[(count+1)/20];
 548   2          lcd_data[1] = LCD_CODE[(((count+1)/2)%10)] + LCD_DOT;
 549   2          lcd_data[2] = LCD_CODE[0];
 550   2          if(count)
 551   2          {
 552   3            lcd_data[2] = LCD_CODE[2];
 553   3            if(count %2){
 554   4              lcd_data[2] = LCD_CODE[1];
 555   4            }
 556   3          }
 557   2        } else {
 558   2          count = (count % 1000);
 559   2          lcd_data[2] = LCD_CODE[count%10];
 560   2          lcd_data[1] = LCD_CODE[(count/10)%10];
 561   2          lcd_data[0] = LCD_CODE[count/100];
 562   2        }
 563   1        LCD_send_bytes(lcd_data);
 564   1        LCD_Delay(5);
 565   1        lcd_data[0] = lcd_data[1] =lcd_data[2] = 0x00;
 566   1        LCD_send_bytes(lcd_data);
 567   1      }
 568          
 569          void main(void)
 570          {
 571   1          int i;
 572   1          
 573   1          UINT16 id = 0; 
 574   1          UINT8 deviceID[2];
 575   1          ALL_GPIO_QUASI_MODE;
 576   1      #ifdef print_function
              /* Modify HIRC to 24MHz for UART baud rate deviation not over 1%*/
                  MODIFY_HIRC(HIRC_16);
                  P06_QUASI_MODE;
                  UART_Open(24000000,UART0_Timer3,115200);
                  ENABLE_UART0_PRINTF;
              #endif
 583   1          /* Initial I2C function */
 584   1          Init_I2C();
 585   1          LCD_INIT(); 
 586   1          Timer3_Delay(16000000,16,400,10); //10ms
 587   1          if(VCNL36821S_begin()!= 1)
 588   1          {
 589   2            while(1);
 590   2          }
 591   1      
 592   1          while (1)
C51 COMPILER V9.60.7.0   I2C_EEPROM                                                        06/25/2023 16:37:22 PAGE 11  

 593   1          {
 594   2      //        if (!readWord(VCNL36821S_REG_ID, &id) || (id & 0xFF) != VCNL36821S_WHO_AM_I)
 595   2      //        {  
 596   2      //          while(1);
 597   2      //        }
 598   2      //        count++;
 599   2      //      VCNL36821_Read_register(0xFB,deviceID);
 600   2      //      valueps=deviceID[1]&0x0F;
 601   2      //      valueps = valueps*256 + deviceID[0];
 602   2      //      if(valueps)
 603   2      //      {
 604   2      //        count++;
 605   2      //        valueps++;
 606   2      //      }
 607   2      //      VCNL36821_Read_register(0xF8,deviceID);
 608   2      //      valueps=deviceID[1]&0x0F;
 609   2      //      valueps = valueps*256 + deviceID[0];
 610   2      //      if(valueps)
 611   2      //      {
 612   2      //        count++;
 613   2      //        valueps++;
 614   2      //      }
 615   2              count++;
 616   2              if(count > 10){
 617   3                count = 0;
 618   3                id++;
 619   3              }
 620   2              LCD_show(id);
 621   2              
 622   2      
 623   2          }
 624   1      /* =================== */
 625   1      }
*** WARNING C280 IN LINE 571 OF ..\I2C_EEPROM.c: 'i': unreferenced local variable
*** WARNING C280 IN LINE 574 OF ..\I2C_EEPROM.c: 'deviceID': unreferenced local variable
 626          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1425    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     21      32
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
