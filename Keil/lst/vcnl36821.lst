C51 COMPILER V9.60.7.0   VCNL36821                                                         08/20/2023 12:05:06 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE VCNL36821
OBJECT MODULE PLACED IN .\Output\vcnl36821.obj
COMPILER INVOKED BY: D:\00.SOFTWARE\03.KeilcC51\C51\BIN\C51.EXE ..\src\vcnl36821.c LARGE OMF2 OPTIMIZE(7,SPEED) BROWSE I
                    -NCDIR(..\Library\Device\Include;..\Library\StdDriver\inc;..\inc) DEFINE(CLOCK=4000000) DEBUG PRINT(.\lst\vcnl36821.lst) 
                    -TABS(2) OBJECT(.\Output\vcnl36821.obj)

line level    source

   1          #include "vcnl36821s.h"
   2          #include "MS51_16K.H"
   3          #include "htim.h"
   4          
   5          #define SYS_DIV 1
   6          #define I2C_CLOCK 4 /* Setting I2C clock as 100K */
   7          
   8          #define EEPROM_SLA 0xC0
   9          #define EEPROM_WR 0
  10          #define EEPROM_RD 1
  11          
  12          #define LED P3
  13          #define EEPROM_PAGE_SIZE 32
  14          #define PAGE_NUMBER 4
  15          
  16          #define ERROR_CODE 0x78
  17          #define TEST_OK 0x00
  18          
  19          bit I2C_Reset_Flag;
  20          //========================================================================================================
  21          void Init_I2C(void)
  22          {
  23   1              P13_OPENDRAIN_MODE; // Modify SCL pin to Open drain mode. don't forget the pull high resister in c
             -ircuit
  24   1              P14_OPENDRAIN_MODE; // Modify SDA pin to Open drain mode. don't forget the pull high resister in c
             -ircuit
  25   1      
  26   1              /* Set I2C clock rate */
  27   1              I2CLK = I2C_CLOCK;
  28   1             /* Enable I2C time out divier as clock base is Fsys/4, the time out is about 4ms when Fsys = 16MHz */
  29   1              set_I2TOC_I2TOCEN;
  30   1              set_I2TOC_DIV;
  31   1              clr_I2TOC_I2TOF;
  32   1              /* Enable I2C */
  33   1              set_I2CON_I2CEN;
  34   1      }
  35          //========================================================================================================
  36          UINT8 I2C_SI_WAIT(void)
  37          {
  38   1              clr_I2CON_SI;
  39   1              clr_I2TOC_I2TOF;
  40   1              while (!SI){ 
  41   2                 if ( I2TOC&SET_BIT0 ) {
  42   3                   clr_I2TOC_I2TOF;
  43   3                   return 1;
  44   3                 }
  45   2              }
  46   1              return 0;
  47   1      }
  48          //========================================================================================================
  49          void I2C_SI_Check(void)
  50          {
  51   1              if ((I2STAT == 0x00) || (I2STAT == 0x10)|| (I2TOC&SET_BIT0))
C51 COMPILER V9.60.7.0   VCNL36821                                                         08/20/2023 12:05:06 PAGE 2   

  52   1              {
  53   2                      clr_I2TOC_I2TOF;
  54   2                      I2C_Reset_Flag = 1;
  55   2                      set_I2CON_STO;
  56   2                      SI = 0;
  57   2                      if (SI)
  58   2                      {
  59   3                          clr_I2CON_I2CEN;
  60   3                          set_I2CON_I2CEN;
  61   3                      }
  62   2              }
  63   1      }
  64          //========================================================================================================
  65          UINT8 VCNL36821_Write_register(UINT8 reg, UINT8 u8low, UINT8 u8high)
  66          {
  67   1              /* Step1 */
  68   1              set_I2CON_STA; /* Send Start bit to I2C EEPROM */
  69   1      //        clr_I2CON_SI;
  70   1      //        while (!SI)
  71   1      //                ;
  72   1              if(I2C_SI_WAIT()) {
  73   2                      I2C_Reset_Flag = 1;
  74   2                      goto Write_Error_Stop;
  75   2              }
  76   1              if (I2STAT != 0x08) /* 0x08:  A START condition has been transmitted*/
  77   1              {
  78   2                      I2C_Reset_Flag = 1;
  79   2                      goto Write_Error_Stop;
  80   2              }
  81   1      
  82   1              /* Step2 */
  83   1              clr_I2CON_STA;                  /* Clear STA and Keep SI value in I2CON */
  84   1              I2DAT = EEPROM_SLA | EEPROM_WR; /* Send (SLA+W) to EEPROM */
  85   1      //        clr_I2CON_SI;
  86   1      //        while (!SI)
  87   1      //                ;
  88   1              if(I2C_SI_WAIT()) {
  89   2                      I2C_Reset_Flag = 1;
  90   2                      goto Write_Error_Stop;
  91   2              }
  92   1              if (I2STAT != 0x18) /* 0x18: SLA+W has been transmitted; ACK has been received */
  93   1              {
  94   2                      I2C_Reset_Flag = 1;
  95   2                      goto Write_Error_Stop;
  96   2              }
  97   1      
  98   1              /* Step3 */
  99   1              I2DAT = reg; /* Send EEPROM's High Byte Address */
 100   1      //        clr_I2CON_SI;
 101   1      //        while (!SI)
 102   1      //                ;
 103   1              if(I2C_SI_WAIT()) {
 104   2                      I2C_Reset_Flag = 1;
 105   2                      goto Write_Error_Stop;
 106   2              }
 107   1              if (I2STAT != 0x28) /* 0x28:  Data byte in S1DAT has been transmitted; ACK has been received */
 108   1              {
 109   2                      I2C_Reset_Flag = 1;
 110   2                      goto Write_Error_Stop;
 111   2              }
 112   1      
 113   1              /* Step3 */
C51 COMPILER V9.60.7.0   VCNL36821                                                         08/20/2023 12:05:06 PAGE 3   

 114   1              I2DAT = u8low; /* Send EEPROM's High Byte Address */
 115   1      //        clr_I2CON_SI;
 116   1      //        while (!SI)
 117   1      //                ;
 118   1              if(I2C_SI_WAIT()) {
 119   2                      I2C_Reset_Flag = 1;
 120   2                      goto Write_Error_Stop;
 121   2              }
 122   1              if (I2STAT != 0x28) /* 0x28:  Data byte in S1DAT has been transmitted; ACK has been received */
 123   1              {
 124   2                      I2C_Reset_Flag = 1;
 125   2                      goto Write_Error_Stop;
 126   2              }
 127   1      
 128   1              /* Step4 */
 129   1              I2DAT = u8high; /* Send EEPROM's Low Byte Address */
 130   1      //        clr_I2CON_SI;
 131   1      //        while (!SI)
 132   1      //                ;
 133   1              if(I2C_SI_WAIT()) {
 134   2                      I2C_Reset_Flag = 1;
 135   2                      goto Write_Error_Stop;
 136   2              }
 137   1              if (I2STAT != 0x28) /* 0x28:  Data byte in S1DAT has been transmitted; ACK has been received */
 138   1              {
 139   2                      I2C_Reset_Flag = 1;
 140   2                      goto Write_Error_Stop;
 141   2              }
 142   1              /* Step7 */
 143   1              set_I2CON_STO; /* Set STOP Bit to I2C EEPROM */
 144   1              clr_I2CON_SI;
 145   1              clr_I2TOC_I2TOF;
 146   1              while (STO) /* Check STOP signal */
 147   1              {
 148   2                      I2C_SI_Check();
 149   2                      if (I2C_Reset_Flag)
 150   2                              goto Write_Error_Stop;
 151   2              }
 152   1      
 153   1      Write_Error_Stop:
 154   1              clr_I2TOC_I2TOF;
 155   1              if (I2C_Reset_Flag)
 156   1              {
 157   2                      I2C_SI_Check();
 158   2                      I2C_Reset_Flag = 0;
 159   2                      return 0;
 160   2              }
 161   1              return 1;
 162   1      }
 163          //========================================================================================================
 164          
 165          UINT8 VCNL36821_Read_register(UINT8 command, UINT8 *u8DAT)
 166          {
 167   1              UINT8 u8Count;
 168   1              /* Step1 */
 169   1              set_I2CON_STA; /* Send Start bit to I2C EEPROM */
 170   1      //        clr_I2CON_SI;
 171   1      //        while (!SI)
 172   1      //                ;
 173   1              if(I2C_SI_WAIT()) {
 174   2                      I2C_Reset_Flag = 1;
 175   2                      goto Read_Error_Stop;
C51 COMPILER V9.60.7.0   VCNL36821                                                         08/20/2023 12:05:06 PAGE 4   

 176   2              }
 177   1              if (I2STAT != 0x08) /* 0x08:  A START condition has been transmitted*/
 178   1              {
 179   2                      if(I2STAT == 0x48)
 180   2                      {
 181   3                        STO = 1;
 182   3                        AA = 1;
 183   3      
 184   3                      }
 185   2                      I2C_Reset_Flag = 1;
 186   2                      goto Read_Error_Stop;
 187   2              }
 188   1      
 189   1              /* Step2 */
 190   1              I2DAT = (EEPROM_SLA | EEPROM_WR); /* Send (SLA+W) to EEPROM */
 191   1              clr_I2CON_STA;                    /* Clear STA and Keep SI value in I2CON */
 192   1      //        clr_I2CON_SI;
 193   1      //        while (!SI)
 194   1      //                ;
 195   1              if(I2C_SI_WAIT()) {
 196   2                      I2C_Reset_Flag = 1;
 197   2                      goto Read_Error_Stop;
 198   2              }
 199   1              if (I2STAT != 0x18) /* 0x18: SLA+W has been transmitted; ACK has been received */
 200   1              {
 201   2                      I2C_Reset_Flag = 1;
 202   2                      goto Read_Error_Stop;
 203   2              }
 204   1      
 205   1              /* Step3 */
 206   1              I2DAT = command; /* Send I2C EEPROM's High Byte Address */
 207   1      //        clr_I2CON_SI;
 208   1      //        while (!SI)
 209   1      //                ;
 210   1              if(I2C_SI_WAIT()) {
 211   2                      I2C_Reset_Flag = 1;
 212   2                      goto Read_Error_Stop;
 213   2              }
 214   1              if (I2STAT != 0x28) /* 0x28:  Data byte in S1DAT has been transmitted; ACK has been received */
 215   1              {
 216   2                      I2C_Reset_Flag = 1;
 217   2                      goto Read_Error_Stop;
 218   2              }
 219   1              /* Step5 */
 220   1              set_I2CON_STA; /* Repeated START */
 221   1      //        clr_I2CON_SI;
 222   1      //        while (!SI)
 223   1      //                ;
 224   1              if(I2C_SI_WAIT()) {
 225   2                      I2C_Reset_Flag = 1;
 226   2                      goto Read_Error_Stop;
 227   2              }
 228   1              if (I2STAT != 0x10) /* 0x10: A repeated START condition has been transmitted */
 229   1              {
 230   2                      I2C_Reset_Flag = 1;
 231   2                      goto Read_Error_Stop;
 232   2              }
 233   1      
 234   1              /* Step6 */
 235   1              clr_I2CON_STA;                    /* Clear STA and Keep SI value in I2CON */
 236   1              I2DAT = (EEPROM_SLA | EEPROM_RD); /* Send (SLA+R) to EEPROM */
 237   1      //        clr_I2CON_SI;
C51 COMPILER V9.60.7.0   VCNL36821                                                         08/20/2023 12:05:06 PAGE 5   

 238   1      //        while (!SI)
 239   1      //                ;
 240   1              if(I2C_SI_WAIT()) {
 241   2                      I2C_Reset_Flag = 1;
 242   2                      goto Read_Error_Stop;
 243   2              }
 244   1              if (I2STAT != 0x40) /* 0x40:  SLA+R has been transmitted; ACK has been received */
 245   1              {
 246   2                      I2C_Reset_Flag = 1;
 247   2                      goto Read_Error_Stop;
 248   2              }
 249   1      
 250   1              /* Step7 */ /* Verify I2C EEPROM data */
 251   1              for (u8Count = 0; u8Count < 2; u8Count++)
 252   1              {
 253   2                      set_I2CON_AA; /* Set Assert Acknowledge Control Bit */
 254   2            //        clr_I2CON_SI;
 255   2            //        while (!SI)
 256   2            //                ;
 257   2                    if(I2C_SI_WAIT()) {
 258   3                            I2C_Reset_Flag = 1;
 259   3                            goto Read_Error_Stop;
 260   3                    }
 261   2                      if (I2STAT != 0x50) /* 0x50:Data byte has been received; NOT ACK has been returned */
 262   2                      {
 263   3                              I2C_Reset_Flag = 1;
 264   3                              goto Read_Error_Stop;
 265   3                      }
 266   2                      u8DAT[u8Count] = I2DAT;
 267   2              }
 268   1              /* Step8 */
 269   1              clr_I2CON_AA; /* Send a NACK to disconnect 24xx64 */
 270   1      //        clr_I2CON_SI;
 271   1      //        while (!SI)
 272   1      //                ;
 273   1              if(I2C_SI_WAIT()) {
 274   2                      I2C_Reset_Flag = 1;
 275   2                      goto Read_Error_Stop;
 276   2              }
 277   1              if (I2STAT != 0x58) /* 0x58:Data byte has been received; ACK has been returned */
 278   1              {
 279   2                      I2C_Reset_Flag = 1;
 280   2                      goto Read_Error_Stop;
 281   2              }
 282   1      
 283   1              /* Step9 */
 284   1              clr_I2CON_SI;
 285   1              set_I2CON_STO;
 286   1              clr_I2TOC_I2TOF;
 287   1              while (STO) /* Check STOP signal */
 288   1              {
 289   2                      I2C_SI_Check();
 290   2                      if (I2C_Reset_Flag)
 291   2                              goto Read_Error_Stop;
 292   2              }
 293   1      
 294   1      Read_Error_Stop:
 295   1              clr_I2TOC_I2TOF;
 296   1              if (I2C_Reset_Flag)
 297   1              {
 298   2                      I2C_SI_Check();
 299   2                      I2C_Reset_Flag = 0;
C51 COMPILER V9.60.7.0   VCNL36821                                                         08/20/2023 12:05:06 PAGE 6   

 300   2                      return 0;
 301   2              }
 302   1              return 1;
 303   1      }
 304          #define PS_CONF4 0x04
 305          
 306          UINT8 readWord(UINT8 tmpreg, volatile UINT16 *rdata)
 307          {
 308   1      
 309   1              UINT8 u8data[2];
 310   1              UINT8 res = VCNL36821_Read_register(tmpreg, u8data);
 311   1              *rdata = u8data[1];
 312   1              *rdata = (*rdata * 256) + u8data[0];
 313   1              return res;
 314   1      }
 315          
 316          UINT8 writeWord(UINT8 reg, UINT16 rdata)
 317          {
 318   1              return VCNL36821_Write_register(reg, (UINT8)rdata, (UINT8)(rdata >> 8));
 319   1      }
 320          
 321          UINT8 bitsUpdate(UINT8 reg, UINT16 mask, UINT16 update)
 322          {
 323   1              UINT16 value;
 324   1      
 325   1              if (!readWord(reg, &value))
 326   1              {
 327   2                      return 0;
 328   2              }
 329   1              value &= mask;
 330   1              value |= update;
 331   1              return writeWord(reg, value);
 332   1      }
 333          
 334          UINT8 set_PS_I_VCSEL(UINT8 i_vcsel)
 335          {
 336   1              return bitsUpdate(VCNL36821S_REG_PS_CONF3, ~VCNL36821S_PS_I_VCSEL_MASK, i_vcsel << VCNL36821S_PS_I
             -_VCSEL_SHIFT);
 337   1      }
 338          
 339          #define PS_IT_3 (3 << 6)
 340          #define PS_ITB_1 (1 << 11)
 341          #define PS_AF_1 (1 << 6)
 342          #define LED_I_15 (15 << 8)
 343          #define PS_AC_PERIOD (0)
 344          #define PS_AC_NUM (3 << 4)
 345          
 346          #define LEDI_144mA 0x0E
 347          #define LEDI_156mA 0x0F
 348          void VCNL_initialize(void)
 349          {
 350   1        // clean config bytes
 351   1        VCNL36821_Write_register(VCNL_PS_CONF1,0x01,0x00);
 352   1        VCNL36821_Write_register(VCNL_PS_CONF2,0xF0,0xE0);
 353   1        VCNL36821_Write_register(VCNL_PS_CONF3,0x00,LEDI_156mA);//config 3,4
 354   1        VCNL36821_Write_register(VCNL_PS_THDL,0x00,0x00);//
 355   1        VCNL36821_Write_register(VCNL_PS_THDH,0xFF,0x0F);//
 356   1        VCNL36821_Write_register(VCNL_PS_CANC,0x00,0x00);//
 357   1        VCNL36821_Write_register(VCNL_PS_AC_L,0x00,0x03);//
 358   1      
 359   1        
 360   1        VCNL36821_Write_register(VCNL_PS_CONF1,0x02,0x00);// PS_ON = 1
C51 COMPILER V9.60.7.0   VCNL36821                                                         08/20/2023 12:05:06 PAGE 7   

 361   1        VCNL36821_Write_register(VCNL_PS_CONF1,0x82,0x00);// PS_INIT=1
 362   1        VCNL36821_Write_register(VCNL_PS_CONF1,0x82,0x02);// set bit 1 of PS_CONF1, PS_ST = 0
 363   1      
 364   1      }
 365          void VCNL36821_Stop(void)
 366          {
 367   1        writeWord(VCNL_PS_CONF1,0x0001);
 368   1        writeWord(VCNL_PS_CONF2,0x0001);
 369   1        writeWord(VCNL_PS_CONF3,0x0000);
 370   1      
 371   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    832    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
