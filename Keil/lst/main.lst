C51 COMPILER V9.60.7.0   MAIN                                                              08/20/2023 12:06:44 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: D:\00.SOFTWARE\03.KeilcC51\C51\BIN\C51.EXE ..\src\main.c LARGE OMF2 OPTIMIZE(7,SPEED) BROWSE INCDIR
                    -(..\Library\Device\Include;..\Library\StdDriver\inc;..\inc) DEFINE(CLOCK=4000000) DEBUG PRINT(.\lst\main.lst) TABS(2) OB
                    -JECT(.\Output\main.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2020 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          
   8          
   9          #include "MS51_16K.H"
  10          #include "htim.h"
  11          #include "vcnl36821s.h"
  12          
  13          typedef enum
  14          {
  15            SYS_MODE_A = 0,
  16            SYS_MODE_B
  17          } _Sys_Mode;
  18          
  19          UINT8 LCD_CODE[] = {0x7E, 0x48, 0x3D, 0x6D, 0x4B, 0x67, 0x77, 0x4C, 0x7F, 0x6F, 0x5F, 0x00, 0x00, 0x00, 0x
             -00, 0x00};
  20          #define LCD_DOT 0x80
  21          
  22          #define LCD_PWM_ON P05 = 1
  23          #define LCD_PWM_OFF P05 = 0
  24          
  25          #define LCD_SCK_HIGH P04 = 1
  26          #define LCD_SCK_LOW P04 = 0
  27          
  28          #define LCD_LAT_HIGH P03 = 1
  29          #define LCD_LAT_LOW P03 = 0
  30          
  31          #define LCD_DATA P01
  32          #define LCD_DATA_HIGH P01 = 1
  33          #define LCD_DATA_LOW P01 = 0
  34          
  35          #define BUTTON_PRESSED !P07
  36          #define IS_SYS_RUN_MOD_A  P30
  37          #define TIMOUT_NON_DETECT_OBJ 1800000    //ms 
  38          
  39          UINT16 valueps;
  40          UINT16 obj_count = 0;
  41          UINT16 ss_read_fail = 0;
  42          
  43          UINT8 isCablibmode = 0;
  44          void LCD_show(UINT16 count);
  45          
  46          void system_shutdown(){
C51 COMPILER V9.60.7.0   MAIN                                                              08/20/2023 12:06:44 PAGE 2   

  47   1        VCNL36821_Stop();
  48   1        BOD_DISABLE;
  49   1        ALL_GPIO_INPUT_MODE;
  50   1        ENABLE_BIT7_FALLINGEDGE_TRIG;
  51   1        ENABLE_PIN_INTERRUPT;
  52   1        ENABLE_GLOBAL_INTERRUPT;
  53   1        while(1)
  54   1        {
  55   2          HAL_TIM_Pause();
  56   2          LCD_PWM_OFF;
  57   2          set_PCON_PD;
  58   2          HAL_TIM_run();
  59   2          HAL_Delay(150);
  60   2          if(BUTTON_PRESSED){   //debound buton
  61   3            while(BUTTON_PRESSED);
  62   3            break;
  63   3          }
  64   2        }
  65   1        set_SWRST;
  66   1        
  67   1      }
  68          void LCD_INIT()
  69          {
  70   1        // P05 LCD_PW out
  71   1        // P04 LCD_SCK out
  72   1        // P03 LCD_LAT out
  73   1        // P01 LCD_DATA out
  74   1        P0M1 &= 0xC5;  // 0b11000101;
  75   1        P0M2 |= ~0xC5; // 0b00111010;
  76   1        LCD_PWM_ON;
  77   1        LCD_SCK_LOW;
  78   1        LCD_LAT_LOW;
  79   1        LCD_DATA_LOW;
  80   1      }
  81          void LCD_Delay(UINT8 dl)
  82          {
  83   1        int i;
  84   1        for (i = 0; i < dl; i++)
  85   1        {
  86   2        }
  87   1      }
  88          
  89          void LCD_send_bytes(UINT8 *dt)
  90          {
  91   1        INT8 i, j;
  92   1        LCD_LAT_LOW;
  93   1        for (i = 2; i >= 0; i--)
  94   1        {
  95   2          for (j = 7; j >= 0; j--)
  96   2          {
  97   3            LCD_SCK_LOW;
  98   3            LCD_DATA = ((dt[i] >> j) & 0x01);
  99   3            LCD_Delay(5);
 100   3            LCD_SCK_HIGH;
 101   3            LCD_Delay(5);
 102   3          }
 103   2        }
 104   1        LCD_LAT_HIGH;
 105   1        LCD_Delay(10);
 106   1        LCD_LAT_LOW;
 107   1      }
 108          
C51 COMPILER V9.60.7.0   MAIN                                                              08/20/2023 12:06:44 PAGE 3   

 109          
 110          _Sys_Mode Sys_Mode = SYS_MODE_B;
 111          void LCD_show(UINT16 count)
 112          {
 113   1        UINT8 lcd_data[3];
 114   1        if (Sys_Mode == SYS_MODE_A && (!isCablibmode))
 115   1        {
 116   2          count = (count % 198);
 117   2          lcd_data[0] = LCD_CODE[(count + 1) / 20];
 118   2          lcd_data[1] = LCD_CODE[(((count + 1) / 2) % 10)] + LCD_DOT;
 119   2          lcd_data[2] = LCD_CODE[0];
 120   2          if (count)
 121   2          {
 122   3            lcd_data[2] = LCD_CODE[2];
 123   3            if (count % 2)
 124   3            {
 125   4              lcd_data[2] = LCD_CODE[1];
 126   4            }
 127   3          }
 128   2        }
 129   1        else
 130   1        {
 131   2          count = (count % 1000);
 132   2          lcd_data[2] = LCD_CODE[count % 10];
 133   2          lcd_data[1] = LCD_CODE[(count / 10) % 10];
 134   2          lcd_data[0] = LCD_CODE[count / 100];
 135   2        }
 136   1        LCD_send_bytes(lcd_data);
 137   1        LCD_Delay(5);
 138   1        lcd_data[0] = lcd_data[1] = lcd_data[2] = 0x00;
 139   1        LCD_send_bytes(lcd_data);
 140   1        LCD_Delay(5);
 141   1      }
 142          
 143          
 144          
 145          UINT16 DETECT_THRESHOLD = 225;
 146          #define NON_DETECT_COUNT 2
 147          
 148          #define TIME_COUNT_OFFJECT 1500  //ms
 149          #define TIME_CHECK_OBJECT  300    //ms
 150          #define OBJECT_INC_TIMES  TIME_COUNT_OFFJECT/TIME_CHECK_OBJECT  
 151          
 152          static UINT32 ttime = 0;
 153          static UINT8 error = 0;
 154          static UINT8 object_detected = 0;
 155          static UINT8 non_object_detected = NON_DETECT_COUNT;
 156          
 157          void reset_counter(){
 158   1        ttime = HAL_GetTick() + 500;
 159   1        object_detected = 0;
 160   1        obj_count = 0;
 161   1      }
 162          
 163          void Process_VCNL36821S(void) {
 164   1          
 165   1          if (HAL_GetTick() > ttime)
 166   1          {
 167   2            ttime = HAL_GetTick() + TIME_CHECK_OBJECT;
 168   2            if(readWord(VCNL_PS_DATA,&valueps))
 169   2            {
 170   3              if(valueps > DETECT_THRESHOLD)
C51 COMPILER V9.60.7.0   MAIN                                                              08/20/2023 12:06:44 PAGE 4   

 171   3              {
 172   4                error = 0;
 173   4                object_detected ++;
 174   4                if(object_detected == OBJECT_INC_TIMES)
 175   4                {
 176   5                  if (Sys_Mode == SYS_MODE_A)
 177   5                  { 
 178   6                    obj_count ++;
 179   6                  }
 180   5                }
 181   4                if(object_detected > OBJECT_INC_TIMES)
 182   4                {
 183   5                  object_detected = OBJECT_INC_TIMES+1;
 184   5                }
 185   4              } else if(object_detected){
 186   4                  non_object_detected --;
 187   4                  if(!non_object_detected){
 188   5                    object_detected = 0;
 189   5                    non_object_detected = NON_DETECT_COUNT;
 190   5                  }
 191   4              }
 192   3            }
 193   2            else { 
 194   3              error++;
 195   3              if(error == 5){
 196   4                
 197   4              }
 198   3            }
 199   2            
 200   2          }
 201   1      }
 202          
 203          void GPIO_Init()
 204          {
 205   1        //P0.7 input
 206   1          P0M1 |= 0x80;
 207   1          P0M2 &= 0x7F;
 208   1      }
 209          typedef enum{
 210            BTN_IDLE  = 0,
 211            BTN_DEBOUND,
 212            BTN_CLICKED,
 213            BTN_PRESSED2S,
 214            BTN_PRESSED2_5S,
 215            BTN_PRESSED3S,
 216            BTN_RELEASE
 217          }_btn_state;
 218          
 219          void btn_time_click_callback()
 220          {
 221   1        if (Sys_Mode == SYS_MODE_A){
 222   2          reset_counter();
 223   2        }
 224   1      }
 225          void btn_time_2sec_callback()
 226          {
 227   1        if (Sys_Mode == SYS_MODE_B){
 228   2          reset_counter();
 229   2        }
 230   1      }
 231          void btn_time_2_5sec_callback()
 232          {
C51 COMPILER V9.60.7.0   MAIN                                                              08/20/2023 12:06:44 PAGE 5   

 233   1        if (Sys_Mode == SYS_MODE_A){
 234   2          system_shutdown();
 235   2        }
 236   1      }
 237          void btn_time_3sec_callback()
 238          {
 239   1        if (Sys_Mode == SYS_MODE_B){
 240   2          system_shutdown();
 241   2        }
 242   1      }
 243          static UINT32 last_btn_time = 0;
 244          void BTN_process()
 245          {
 246   1        static UINT32 btn_time = 0;
 247   1        
 248   1        static _btn_state btn_state= BTN_IDLE;
 249   1        if(BUTTON_PRESSED) {
 250   2          switch(btn_state) {
 251   3            case BTN_IDLE:
 252   3                btn_state = BTN_DEBOUND;
 253   3                btn_time = HAL_GetTick() +25;
 254   3              break;
 255   3            case BTN_DEBOUND:
 256   3              if(HAL_GetTick() >btn_time){
 257   4                  btn_state = BTN_PRESSED2S;
 258   4      //            btn_time_click_callback();
 259   4                  btn_time = HAL_GetTick() +2000 ;
 260   4              }
 261   3              break;
 262   3            case BTN_PRESSED2S:
 263   3              if(HAL_GetTick() >btn_time){
 264   4                  btn_time_2sec_callback();
 265   4                  btn_state = BTN_PRESSED2_5S;
 266   4                  btn_time = HAL_GetTick() +500 ;
 267   4              }
 268   3              break;
 269   3            case BTN_PRESSED2_5S:
 270   3              if(HAL_GetTick() >btn_time){
 271   4                  btn_time_2_5sec_callback();
 272   4                  btn_state = BTN_PRESSED3S;
 273   4                  btn_time = HAL_GetTick() +500 ;
 274   4              }
 275   3              break;
 276   3            case BTN_PRESSED3S:
 277   3              if(HAL_GetTick() >btn_time){
 278   4                btn_time_3sec_callback();
 279   4              }
 280   3              break;
 281   3            case BTN_RELEASE:
 282   3              {
 283   4                
 284   4              }
 285   3              break;
 286   3            default:
 287   3              break;
 288   3          }
 289   2        } else {
 290   2          switch(btn_state)
 291   2          {
 292   3            case BTN_PRESSED2_5S:
 293   3            case BTN_PRESSED2S:
 294   3              if (Sys_Mode == SYS_MODE_B){
C51 COMPILER V9.60.7.0   MAIN                                                              08/20/2023 12:06:44 PAGE 6   

 295   4                obj_count ++;
 296   4              } else if (Sys_Mode == SYS_MODE_A){
 297   4                if(HAL_GetTick() < last_btn_time)
 298   4                {
 299   5                  isCablibmode = 1- isCablibmode;
 300   5                }
 301   4                last_btn_time = HAL_GetTick()+500;
 302   4                reset_counter();
 303   4              } 
 304   3              break;
 305   3          }
 306   2          btn_state = BTN_IDLE;
 307   2        }
 308   1      }
 309          
 310          void PinInterrupt_ISR (void) interrupt 7 
 311          {
 312   1        _push_(SFRS);
 313   1        
 314   1          SFRS = 0;
 315   1          switch(PIF)
 316   1          {
 317   2          case (SET_BIT7):{
 318   3                PIF&=CLR_BIT7; 
 319   3                break;
 320   3          } 
 321   2          default: break;
 322   2          }
 323   1      
 324   1        _pop_(SFRS);
 325   1      }
 326          
 327          void check_non_obj_detect_timout(void)
 328          {
 329   1        static UINT16 old_obj_count = 0xFFFF; // dif obj_count
 330   1        static xdata UINT32 timout =0;
 331   1        if(old_obj_count != obj_count)
 332   1        {
 333   2          timout = HAL_GetTick() + TIMOUT_NON_DETECT_OBJ;
 334   2          old_obj_count =obj_count;
 335   2        }
 336   1        if(HAL_GetTick() > timout)
 337   1        {
 338   2          system_shutdown();
 339   2        }
 340   1        
 341   1      }
 342          
 343          _Sys_Mode Check_system_mode()
 344          {
 345   1        if(IS_SYS_RUN_MOD_A)
 346   1        {
 347   2          return SYS_MODE_A;
 348   2        } 
 349   1        return SYS_MODE_B;
 350   1      }
 351          
 352          void WDT_ISR (void)   interrupt 10
 353          {
 354   1      _push_(SFRS);
 355   1      
 356   1        /* Config Enable WDT reset and not clear couter trig reset */
C51 COMPILER V9.60.7.0   MAIN                                                              08/20/2023 12:06:44 PAGE 7   

 357   1          WDT_COUNTER_CLEAR;                     /* Clear WDT counter */
 358   1          while(!(WDCON&=SET_BIT6));             /* Check for the WDT counter cleared */
 359   1          P12 = ~P12;
 360   1      
 361   1          CLEAR_WDT_INTERRUPT_FLAG;
 362   1      _pop_(SFRS);
 363   1      }
 364          
 365          
 366          void Disable_WDT_Reset_Config(void)
 367          {
 368   1        UINT8 cf0,cf1,cf2,cf3,cf4;
 369   1        
 370   1          set_CHPCON_IAPEN;
 371   1          IAPAL = 0x00;
 372   1          IAPAH = 0x00;
 373   1          IAPCN = BYTE_READ_CONFIG;
 374   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG0 data
 375   1          cf0 = IAPFD;
 376   1          IAPAL = 0x01;
 377   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG1 data
 378   1          cf1 = IAPFD;
 379   1          IAPAL = 0x02;
 380   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG2 data
 381   1          cf2 = IAPFD;
 382   1          IAPAL = 0x03;
 383   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG3 data
 384   1          cf3 = IAPFD;
 385   1          IAPAL = 0x04;
 386   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG4 data
 387   1          cf4 = IAPFD;
 388   1          cf4 |= 0xF0;                                      //Moidfy Storage CONFIG4 data disable WDT reset
 389   1          
 390   1          set_IAPUEN_CFUEN;  
 391   1          IAPCN = PAGE_ERASE_CONFIG;                        //Erase CONFIG all
 392   1          IAPAH = 0x00;
 393   1          IAPAL = 0x00;
 394   1          IAPFD = 0xFF;
 395   1          set_IAPTRG_IAPGO;
 396   1          
 397   1          IAPCN = BYTE_PROGRAM_CONFIG;                    //Write CONFIG
 398   1          IAPFD = cf0;
 399   1          set_IAPTRG_IAPGO;
 400   1          IAPAL = 0x01;
 401   1          IAPFD = cf1;
 402   1          set_IAPTRG_IAPGO;
 403   1          IAPAL = 0x02;
 404   1          IAPFD = cf2;
 405   1          set_IAPTRG_IAPGO;
 406   1          IAPAL = 0x03;
 407   1          IAPFD = cf3;
 408   1          set_IAPTRG_IAPGO;
 409   1          IAPAL = 0x04;
 410   1          IAPFD = cf4;
 411   1          set_IAPTRG_IAPGO;
 412   1      
 413   1          set_IAPUEN_CFUEN;
 414   1          clr_CHPCON_IAPEN;
 415   1          if (WDCON&SET_BIT3)
 416   1          {
 417   2            clr_WDCON_WDTRF;
 418   2            set_CHPCON_SWRST;
C51 COMPILER V9.60.7.0   MAIN                                                              08/20/2023 12:06:44 PAGE 8   

 419   2          }
 420   1      }
 421          
 422          
 423          void main(void)
 424          {
 425   1        UINT16 id = 0;
 426   1        UINT32 ttime = 0;
 427   1        
 428   1        UINT32 Timm_tmp = 0;
 429   1        UINT8 count_val = 0;
 430   1        UINT32 total=0;
 431   1        
 432   1        UINT32 Timm = 0;
 433   1      
 434   1        
 435   1        ALL_GPIO_INPUT_MODE;
 436   1        MODIFY_HIRC(HIRC_16);
 437   1        /* Initial I2C function */
 438   1        CKDIV = 4;    //2Mhz 16/(CKDIV*2) 
 439   1        Sys_Mode = Check_system_mode();
 440   1        Init_I2C();
 441   1        LCD_INIT();
 442   1        Timer3_INT_Initial(DIV2, 0xFC, 0x18);
 443   1        if (Sys_Mode == SYS_MODE_A){
 444   2        VCNL_initialize();
 445   2        } else {
 446   2          VCNL36821_Stop();
 447   2        }
 448   1        GPIO_Init();
 449   1        
 450   1        
 451   1      //    WDT_TIMEOUT_800MS;                     /* Setting WDT time out */
 452   1      ////    ENABLE_WDT_INTERRUPT;
 453   1      ////    WDT_RUN_IN_POWERDOWN_DISABLE;
 454   1      ////    WDT_RUN_IN_POWERDOWN_ENABLE;
 455   1      ////    ENABLE_GLOBAL_INTERRUPT;
 456   1      //    WDT_COUNTER_RUN;                       /* WDT start to run */
 457   1      //    WDT_COUNTER_CLEAR;                     /* Clear WDT counter */
 458   1        isCablibmode = 1;
 459   1        total = 0;
 460   1        Timm = HAL_GetTick() + 1000;
 461   1        readWord(VCNL_PS_ID,&valueps);
 462   1        while(1)
 463   1        {
 464   2          if(HAL_GetTick() > Timm)
 465   2          {
 466   3            if(HAL_GetTick() > Timm_tmp) {
 467   4              if(readWord(VCNL_PS_DATA,&valueps))
 468   4              {
 469   5                ss_read_fail = 0;
 470   5                Timm_tmp = HAL_GetTick() + 200;
 471   5                total += valueps;
 472   5                count_val ++;
 473   5                if(count_val == 30)
 474   5                  break;
 475   5              } else {
 476   5                Timm_tmp = HAL_GetTick() + 30;
 477   5                ss_read_fail++;
 478   5              }
 479   4            }
 480   3          }
C51 COMPILER V9.60.7.0   MAIN                                                              08/20/2023 12:06:44 PAGE 9   

 481   2          LCD_show(valueps);
 482   2        }
 483   1        DETECT_THRESHOLD = (total / 30) + 15;
 484   1        isCablibmode=0;
 485   1        while (1)
 486   1        {
 487   2      //    WDT_COUNTER_CLEAR;                     /* Clear WDT counter */
 488   2          BTN_process();
 489   2      //    I2C_reset();
 490   2          if (Sys_Mode == SYS_MODE_A){
 491   3            Process_VCNL36821S();
 492   3          }
 493   2          if(Sys_Mode != Check_system_mode())
 494   2          {
 495   3            set_SWRST;
 496   3          }
 497   2          if(isCablibmode) {
 498   3            LCD_show(valueps);
 499   3          } else {
 500   3            LCD_show(obj_count);
 501   3          }
 502   2          check_non_obj_detect_timout();
 503   2        }
 504   1        /* =================== */
 505   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2257    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     48      27
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
