C51 COMPILER V9.60.7.0   MAIN                                                              07/30/2023 12:20:44 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: D:\00.SOFTWARE\03.KeilcC51\C51\BIN\C51.EXE ..\src\main.c LARGE OMF2 OPTIMIZE(7,SPEED) BROWSE INCDIR
                    -(..\Library\Device\Include;..\Library\StdDriver\inc;..\inc) DEFINE(CLOCK=4000000) DEBUG PRINT(.\lst\main.lst) TABS(2) OB
                    -JECT(.\Output\main.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2020 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          
   8          
   9          #include "MS51_16K.H"
  10          #include "htim.h"
  11          #include "vcnl36821s.h"
  12          
  13          typedef enum
  14          {
  15            SYS_MODE_A = 0,
  16            SYS_MODE_B
  17          } _Sys_Mode;
  18          
  19          UINT8 LCD_CODE[] = {0x7E, 0x48, 0x3D, 0x6D, 0x4B, 0x67, 0x77, 0x4C, 0x7F, 0x6F, 0x5F, 0x00, 0x00, 0x00, 0x
             -00, 0x00};
  20          #define LCD_DOT 0x80
  21          
  22          #define LCD_PWM_ON P05 = 1
  23          #define LCD_PWM_OFF P05 = 0
  24          
  25          #define LCD_SCK_HIGH P04 = 1
  26          #define LCD_SCK_LOW P04 = 0
  27          
  28          #define LCD_LAT_HIGH P03 = 1
  29          #define LCD_LAT_LOW P03 = 0
  30          
  31          #define LCD_DATA P01
  32          #define LCD_DATA_HIGH P01 = 1
  33          #define LCD_DATA_LOW P01 = 0
  34          
  35          #define BUTTON_PRESSED !P07
  36          #define IS_SYS_RUN_MOD_A  P30
  37          #define TIMOUT_NON_DETECT_OBJ 1800000    //ms 
  38          
  39          UINT16 valueps;
  40          UINT16 obj_count = 0;
  41          
  42          void LCD_show(UINT16 count);
  43          
  44          void system_shutdown(){
  45   1        VCNL36821_Stop();
  46   1        BOD_DISABLE;
C51 COMPILER V9.60.7.0   MAIN                                                              07/30/2023 12:20:44 PAGE 2   

  47   1        ALL_GPIO_INPUT_MODE;
  48   1        ENABLE_BIT7_FALLINGEDGE_TRIG;
  49   1        ENABLE_PIN_INTERRUPT;
  50   1        ENABLE_GLOBAL_INTERRUPT;
  51   1        while(1)
  52   1        {
  53   2          HAL_TIM_Pause();
  54   2          LCD_PWM_OFF;
  55   2          set_PCON_PD;
  56   2          HAL_TIM_run();
  57   2          HAL_Delay(150);
  58   2          if(BUTTON_PRESSED){   //debound buton
  59   3            while(BUTTON_PRESSED);
  60   3            break;
  61   3          }
  62   2        }
  63   1        set_SWRST;
  64   1        
  65   1      }
  66          void LCD_INIT()
  67          {
  68   1        // P05 LCD_PW out
  69   1        // P04 LCD_SCK out
  70   1        // P03 LCD_LAT out
  71   1        // P01 LCD_DATA out
  72   1        P0M1 &= 0xC5;  // 0b11000101;
  73   1        P0M2 |= ~0xC5; // 0b00111010;
  74   1        LCD_PWM_ON;
  75   1        LCD_SCK_LOW;
  76   1        LCD_LAT_LOW;
  77   1        LCD_DATA_LOW;
  78   1      }
  79          void LCD_Delay(UINT8 dl)
  80          {
  81   1        int i;
  82   1        for (i = 0; i < dl; i++)
  83   1        {
  84   2        }
  85   1      }
  86          
  87          void LCD_send_bytes(UINT8 *dt)
  88          {
  89   1        INT8 i, j;
  90   1        LCD_LAT_LOW;
  91   1        for (i = 2; i >= 0; i--)
  92   1        {
  93   2          for (j = 7; j >= 0; j--)
  94   2          {
  95   3            LCD_SCK_LOW;
  96   3            LCD_DATA = ((dt[i] >> j) & 0x01);
  97   3            LCD_Delay(5);
  98   3            LCD_SCK_HIGH;
  99   3            LCD_Delay(5);
 100   3          }
 101   2        }
 102   1        LCD_LAT_HIGH;
 103   1        LCD_Delay(10);
 104   1        LCD_LAT_LOW;
 105   1      }
 106          
 107          
 108          _Sys_Mode Sys_Mode = SYS_MODE_B;
C51 COMPILER V9.60.7.0   MAIN                                                              07/30/2023 12:20:44 PAGE 3   

 109          void LCD_show(UINT16 count)
 110          {
 111   1        UINT8 lcd_data[3];
 112   1        if (Sys_Mode == SYS_MODE_A)
 113   1        {
 114   2          count = (count % 198);
 115   2          lcd_data[0] = LCD_CODE[(count + 1) / 20];
 116   2          lcd_data[1] = LCD_CODE[(((count + 1) / 2) % 10)] + LCD_DOT;
 117   2          lcd_data[2] = LCD_CODE[0];
 118   2          if (count)
 119   2          {
 120   3            lcd_data[2] = LCD_CODE[2];
 121   3            if (count % 2)
 122   3            {
 123   4              lcd_data[2] = LCD_CODE[1];
 124   4            }
 125   3          }
 126   2        }
 127   1        else
 128   1        {
 129   2          count = (count % 1000);
 130   2          lcd_data[2] = LCD_CODE[count % 10];
 131   2          lcd_data[1] = LCD_CODE[(count / 10) % 10];
 132   2          lcd_data[0] = LCD_CODE[count / 100];
 133   2        }
 134   1        LCD_send_bytes(lcd_data);
 135   1        LCD_Delay(10);
 136   1        lcd_data[0] = lcd_data[1] = lcd_data[2] = 0x00;
 137   1        LCD_send_bytes(lcd_data);
 138   1        LCD_Delay(10);
 139   1      }
 140          
 141          
 142          
 143          #define DETECT_THRESHOLD  68
 144          #define NON_DETECT_COUNT 2
 145          
 146          #define TIME_COUNT_OFFJECT 1500  //ms
 147          #define TIME_CHECK_OBJECT  300    //ms
 148          #define OBJECT_INC_TIMES  TIME_COUNT_OFFJECT/TIME_CHECK_OBJECT  
 149          
 150          static UINT32 ttime = 0;
 151          static UINT8 error = 0;
 152          static UINT8 object_detected = 0;
 153          static UINT8 non_object_detected = NON_DETECT_COUNT;
 154          
 155          void reset_counter(){
 156   1        ttime = HAL_GetTick() + 500;
 157   1        object_detected = 0;
 158   1        obj_count = 0;
 159   1      }
 160          
 161          void Process_VCNL36821S(void) {
 162   1          
 163   1          if (HAL_GetTick() > ttime)
 164   1          {
 165   2            ttime = HAL_GetTick() + TIME_CHECK_OBJECT;
 166   2            if(readWord(VCNL_PS_DATA,&valueps))
 167   2            {
 168   3              if(valueps > DETECT_THRESHOLD)
 169   3              {
 170   4                error = 0;
C51 COMPILER V9.60.7.0   MAIN                                                              07/30/2023 12:20:44 PAGE 4   

 171   4                object_detected ++;
 172   4                if(object_detected == OBJECT_INC_TIMES)
 173   4                {
 174   5                  if (Sys_Mode == SYS_MODE_A)
 175   5                  { 
 176   6                    obj_count ++;
 177   6                  }
 178   5                }
 179   4                if(object_detected > OBJECT_INC_TIMES)
 180   4                {
 181   5                  object_detected = OBJECT_INC_TIMES+1;
 182   5                }
 183   4              } else if(object_detected){
 184   4                  non_object_detected --;
 185   4                  if(!non_object_detected){
 186   5                    object_detected = 0;
 187   5                    non_object_detected = NON_DETECT_COUNT;
 188   5                  }
 189   4              }
 190   3            }
 191   2            else { 
 192   3              error++;
 193   3              if(error == 5){
 194   4                
 195   4              }
 196   3            }
 197   2            
 198   2          }
 199   1      }
 200          
 201          void GPIO_Init()
 202          {
 203   1        //P0.7 input
 204   1          P0M1 |= 0x80;
 205   1          P0M2 &= 0x7F;
 206   1      }
 207          typedef enum{
 208            BTN_IDLE  = 0,
 209            BTN_DEBOUND,
 210            BTN_CLICKED,
 211            BTN_PRESSED2S,
 212            BTN_PRESSED2_5S,
 213            BTN_PRESSED3S,
 214            BTN_RELEASE
 215          }_btn_state;
 216          
 217          void btn_time_click_callback()
 218          {
 219   1        if (Sys_Mode == SYS_MODE_A){
 220   2          reset_counter();
 221   2        }
 222   1      }
 223          void btn_time_2sec_callback()
 224          {
 225   1        if (Sys_Mode == SYS_MODE_B){
 226   2          reset_counter();
 227   2        }
 228   1      }
 229          void btn_time_2_5sec_callback()
 230          {
 231   1        if (Sys_Mode == SYS_MODE_A){
 232   2          system_shutdown();
C51 COMPILER V9.60.7.0   MAIN                                                              07/30/2023 12:20:44 PAGE 5   

 233   2        }
 234   1      }
 235          void btn_time_3sec_callback()
 236          {
 237   1        if (Sys_Mode == SYS_MODE_B){
 238   2          system_shutdown();
 239   2        }
 240   1      }
 241          void BTN_process()
 242          {
 243   1        static UINT32 btn_time = 0;
 244   1        static _btn_state btn_state= BTN_IDLE;
 245   1        if(BUTTON_PRESSED) {
 246   2          switch(btn_state) {
 247   3            case BTN_IDLE:
 248   3                btn_state = BTN_DEBOUND;
 249   3                btn_time = HAL_GetTick() +25;
 250   3              break;
 251   3            case BTN_DEBOUND:
 252   3              if(HAL_GetTick() >btn_time){
 253   4                  btn_state = BTN_PRESSED2S;
 254   4      //            btn_time_click_callback();
 255   4                  btn_time = HAL_GetTick() +2000 ;
 256   4              }
 257   3              break;
 258   3            case BTN_PRESSED2S:
 259   3              if(HAL_GetTick() >btn_time){
 260   4                  btn_time_2sec_callback();
 261   4                  btn_state = BTN_PRESSED2_5S;
 262   4                  btn_time = HAL_GetTick() +500 ;
 263   4              }
 264   3              break;
 265   3            case BTN_PRESSED2_5S:
 266   3              if(HAL_GetTick() >btn_time){
 267   4                  btn_time_2_5sec_callback();
 268   4                  btn_state = BTN_PRESSED3S;
 269   4                  btn_time = HAL_GetTick() +500 ;
 270   4              }
 271   3              break;
 272   3            case BTN_PRESSED3S:
 273   3              if(HAL_GetTick() >btn_time){
 274   4                btn_time_3sec_callback();
 275   4              }
 276   3              break;
 277   3            case BTN_RELEASE:
 278   3              {
 279   4                
 280   4              }
 281   3              break;
 282   3            default:
 283   3              break;
 284   3          }
 285   2        } else {
 286   2          switch(btn_state)
 287   2          {
 288   3            case BTN_PRESSED2S:
 289   3              if (Sys_Mode == SYS_MODE_B){
 290   4                obj_count ++;
 291   4              } else if (Sys_Mode == SYS_MODE_A){
 292   4                reset_counter();
 293   4              } 
 294   3      
C51 COMPILER V9.60.7.0   MAIN                                                              07/30/2023 12:20:44 PAGE 6   

 295   3              break;
 296   3          }
 297   2          btn_state = BTN_IDLE;
 298   2        }
 299   1      }
 300          
 301          void PinInterrupt_ISR (void) interrupt 7 
 302          {
 303   1        _push_(SFRS);
 304   1        
 305   1          SFRS = 0;
 306   1          switch(PIF)
 307   1          {
 308   2          case (SET_BIT7):{
 309   3                PIF&=CLR_BIT7; 
 310   3                break;
 311   3          } 
 312   2          default: break;
 313   2          }
 314   1      
 315   1        _pop_(SFRS);
 316   1      }
 317          
 318          void check_non_obj_detect_timout(void)
 319          {
 320   1        static UINT16 old_obj_count = 0xFFFF; // dif obj_count
 321   1        static xdata UINT32 timout =0;
 322   1        if(old_obj_count != obj_count)
 323   1        {
 324   2          timout = HAL_GetTick() + TIMOUT_NON_DETECT_OBJ;
 325   2          old_obj_count =obj_count;
 326   2        }
 327   1        if(HAL_GetTick() > timout)
 328   1        {
 329   2          system_shutdown();
 330   2        }
 331   1        
 332   1      }
 333          
 334          _Sys_Mode Check_system_mode()
 335          {
 336   1        if(IS_SYS_RUN_MOD_A)
 337   1        {
 338   2          return SYS_MODE_A;
 339   2        } 
 340   1        return SYS_MODE_B;
 341   1      }
 342          
 343          void WDT_ISR (void)   interrupt 10
 344          {
 345   1      _push_(SFRS);
 346   1      
 347   1        /* Config Enable WDT reset and not clear couter trig reset */
 348   1          WDT_COUNTER_CLEAR;                     /* Clear WDT counter */
 349   1          while(!(WDCON&=SET_BIT6));             /* Check for the WDT counter cleared */
 350   1          P12 = ~P12;
 351   1      
 352   1          CLEAR_WDT_INTERRUPT_FLAG;
 353   1      _pop_(SFRS);
 354   1      }
 355          
 356          
C51 COMPILER V9.60.7.0   MAIN                                                              07/30/2023 12:20:44 PAGE 7   

 357          void Disable_WDT_Reset_Config(void)
 358          {
 359   1        UINT8 cf0,cf1,cf2,cf3,cf4;
 360   1        
 361   1          set_CHPCON_IAPEN;
 362   1          IAPAL = 0x00;
 363   1          IAPAH = 0x00;
 364   1          IAPCN = BYTE_READ_CONFIG;
 365   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG0 data
 366   1          cf0 = IAPFD;
 367   1          IAPAL = 0x01;
 368   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG1 data
 369   1          cf1 = IAPFD;
 370   1          IAPAL = 0x02;
 371   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG2 data
 372   1          cf2 = IAPFD;
 373   1          IAPAL = 0x03;
 374   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG3 data
 375   1          cf3 = IAPFD;
 376   1          IAPAL = 0x04;
 377   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG4 data
 378   1          cf4 = IAPFD;
 379   1          cf4 |= 0xF0;                                      //Moidfy Storage CONFIG4 data disable WDT reset
 380   1          
 381   1          set_IAPUEN_CFUEN;  
 382   1          IAPCN = PAGE_ERASE_CONFIG;                        //Erase CONFIG all
 383   1          IAPAH = 0x00;
 384   1          IAPAL = 0x00;
 385   1          IAPFD = 0xFF;
 386   1          set_IAPTRG_IAPGO;
 387   1          
 388   1          IAPCN = BYTE_PROGRAM_CONFIG;                    //Write CONFIG
 389   1          IAPFD = cf0;
 390   1          set_IAPTRG_IAPGO;
 391   1          IAPAL = 0x01;
 392   1          IAPFD = cf1;
 393   1          set_IAPTRG_IAPGO;
 394   1          IAPAL = 0x02;
 395   1          IAPFD = cf2;
 396   1          set_IAPTRG_IAPGO;
 397   1          IAPAL = 0x03;
 398   1          IAPFD = cf3;
 399   1          set_IAPTRG_IAPGO;
 400   1          IAPAL = 0x04;
 401   1          IAPFD = cf4;
 402   1          set_IAPTRG_IAPGO;
 403   1      
 404   1          set_IAPUEN_CFUEN;
 405   1          clr_CHPCON_IAPEN;
 406   1          if (WDCON&SET_BIT3)
 407   1          {
 408   2            clr_WDCON_WDTRF;
 409   2            set_CHPCON_SWRST;
 410   2          }
 411   1      }
 412          
 413          
 414          void main(void)
 415          {
 416   1        UINT16 id = 0;
 417   1        UINT32 ttime = 0;
 418   1        ALL_GPIO_INPUT_MODE;
C51 COMPILER V9.60.7.0   MAIN                                                              07/30/2023 12:20:44 PAGE 8   

 419   1        MODIFY_HIRC(HIRC_16);
 420   1        /* Initial I2C function */
 421   1        CKDIV = 4;    //2Mhz 16/(CKDIV*2) 
 422   1        Sys_Mode = Check_system_mode();
 423   1        Init_I2C();
 424   1        LCD_INIT();
 425   1        Timer3_INT_Initial(DIV2, 0xFC, 0x18);
 426   1        if (Sys_Mode == SYS_MODE_A){
 427   2        VCNL_initialize();
 428   2        } else {
 429   2          VCNL36821_Stop();
 430   2        }
 431   1        GPIO_Init();
 432   1        
 433   1        
 434   1      //    WDT_TIMEOUT_800MS;                     /* Setting WDT time out */
 435   1      ////    ENABLE_WDT_INTERRUPT;
 436   1      ////    WDT_RUN_IN_POWERDOWN_DISABLE;
 437   1      ////    WDT_RUN_IN_POWERDOWN_ENABLE;
 438   1      ////    ENABLE_GLOBAL_INTERRUPT;
 439   1      //    WDT_COUNTER_RUN;                       /* WDT start to run */
 440   1      //    WDT_COUNTER_CLEAR;                     /* Clear WDT counter */
 441   1        while (1)
 442   1        {
 443   2      //    WDT_COUNTER_CLEAR;                     /* Clear WDT counter */
 444   2          BTN_process();
 445   2      //    I2C_reset();
 446   2          if (Sys_Mode == SYS_MODE_A){
 447   3            Process_VCNL36821S();
 448   3          }
 449   2          if(Sys_Mode != Check_system_mode())
 450   2          {
 451   3            set_SWRST;
 452   3          }
 453   2          LCD_show(obj_count);
 454   2          check_non_obj_detect_timout();
 455   2        }
 456   1        /* =================== */
 457   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1839    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     39      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
