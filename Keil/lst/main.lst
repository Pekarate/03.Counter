C51 COMPILER V9.60.7.0   MAIN                                                              06/30/2023 21:32:08 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: D:\00.SOFTWARE\03.KeilcC51\C51\BIN\C51.EXE ..\src\main.c LARGE OMF2 OPTIMIZE(7,SPEED) BROWSE INCDIR
                    -(..\Library\Device\Include;..\Library\StdDriver\inc;..\inc) DEFINE(CLOCK=4000000) DEBUG PRINT(.\lst\main.lst) TABS(2) OB
                    -JECT(.\Output\main.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2020 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          
   8          
   9          #include "MS51_16K.H"
  10          #include "htim.h"
  11          #include "vcnl36821s.h"
  12          
  13          typedef enum
  14          {
  15            SYS_MODE_A = 0,
  16            SYS_MODE_B
  17          } _Sys_Mode;
  18          
  19          UINT8 LCD_CODE[] = {0x7E, 0x48, 0x3D, 0x6D, 0x4B, 0x67, 0x77, 0x4C, 0x7F, 0x6F, 0x5F, 0x00, 0x00, 0x00, 0x
             -00, 0x00};
  20          #define LCD_DOT 0x80
  21          
  22          #define LCD_PWM_ON P05 = 1
  23          #define LCD_PWM_OFF P05 = 0
  24          
  25          #define LCD_SCK_HIGH P04 = 1
  26          #define LCD_SCK_LOW P04 = 0
  27          
  28          #define LCD_LAT_HIGH P03 = 1
  29          #define LCD_LAT_LOW P03 = 0
  30          
  31          #define LCD_DATA P01
  32          #define LCD_DATA_HIGH P01 = 1
  33          #define LCD_DATA_LOW P01 = 0
  34          
  35          #define BUTTON_PRESSED !P07
  36          #define IS_SYS_RUN_MOD_A  P15
  37          #define TIMOUT_NON_DETECT_OBJ 120000    //ms 
  38          
  39          UINT16 valueps;
  40          UINT16 obj_count = 0;
  41          
  42          void LCD_show(UINT16 count);
  43          
  44          void system_shutdown(){
  45   1        VCNL36821_Stop();
  46   1        BOD_DISABLE;
C51 COMPILER V9.60.7.0   MAIN                                                              06/30/2023 21:32:08 PAGE 2   

  47   1        ALL_GPIO_INPUT_MODE;
  48   1        ENABLE_BIT7_FALLINGEDGE_TRIG;
  49   1        ENABLE_PIN_INTERRUPT;
  50   1        ENABLE_GLOBAL_INTERRUPT;
  51   1        while(1)
  52   1        {
  53   2          HAL_TIM_Pause();
  54   2      
  55   2          clr_PCON_IDLE;
  56   2          set_PCON_PD;
  57   2          HAL_TIM_run();
  58   2          HAL_Delay(150);
  59   2          if(BUTTON_PRESSED){   //debound buton
  60   3            while(BUTTON_PRESSED);
  61   3            break;
  62   3          }
  63   2        }
  64   1        set_SWRST;
  65   1        
  66   1      }
  67          void LCD_INIT()
  68          {
  69   1        // P05 LCD_PW out
  70   1        // P04 LCD_SCK out
  71   1        // P03 LCD_LAT out
  72   1        // P01 LCD_DATA out
  73   1        P0M1 &= 0xC5;  // 0b11000101;
  74   1        P0M2 |= ~0xC5; // 0b00111010;
  75   1        LCD_PWM_ON;
  76   1        LCD_SCK_LOW;
  77   1        LCD_LAT_LOW;
  78   1        LCD_DATA_LOW;
  79   1      }
  80          void LCD_Delay(UINT8 dl)
  81          {
  82   1        int i;
  83   1        for (i = 0; i < dl; i++)
  84   1        {
  85   2        }
  86   1      }
  87          
  88          void LCD_send_bytes(UINT8 *dt)
  89          {
  90   1        INT8 i, j;
  91   1        LCD_LAT_LOW;
  92   1        for (i = 2; i >= 0; i--)
  93   1        {
  94   2          for (j = 7; j >= 0; j--)
  95   2          {
  96   3            LCD_SCK_LOW;
  97   3            LCD_DATA = ((dt[i] >> j) & 0x01);
  98   3            LCD_Delay(5);
  99   3            LCD_SCK_HIGH;
 100   3            LCD_Delay(5);
 101   3          }
 102   2        }
 103   1        LCD_LAT_HIGH;
 104   1        LCD_Delay(10);
 105   1        LCD_LAT_LOW;
 106   1      }
 107          
 108          
C51 COMPILER V9.60.7.0   MAIN                                                              06/30/2023 21:32:08 PAGE 3   

 109          _Sys_Mode Sys_Mode = SYS_MODE_B;
 110          void LCD_show(UINT16 count)
 111          {
 112   1        UINT8 lcd_data[3];
 113   1        if (Sys_Mode == SYS_MODE_A)
 114   1        {
 115   2          count = (count % 198);
 116   2          lcd_data[0] = LCD_CODE[(count + 1) / 20];
 117   2          lcd_data[1] = LCD_CODE[(((count + 1) / 2) % 10)] + LCD_DOT;
 118   2          lcd_data[2] = LCD_CODE[0];
 119   2          if (count)
 120   2          {
 121   3            lcd_data[2] = LCD_CODE[2];
 122   3            if (count % 2)
 123   3            {
 124   4              lcd_data[2] = LCD_CODE[1];
 125   4            }
 126   3          }
 127   2        }
 128   1        else
 129   1        {
 130   2          count = (count % 1000);
 131   2          lcd_data[2] = LCD_CODE[count % 10];
 132   2          lcd_data[1] = LCD_CODE[(count / 10) % 10];
 133   2          lcd_data[0] = LCD_CODE[count / 100];
 134   2        }
 135   1        LCD_send_bytes(lcd_data);
 136   1        LCD_Delay(10);
 137   1        lcd_data[0] = lcd_data[1] = lcd_data[2] = 0x00;
 138   1        LCD_send_bytes(lcd_data);
 139   1        LCD_Delay(10);
 140   1      }
 141          
 142          
 143          
 144          #define DETECT_THRESHOLD  20
 145          #define NON_DETECT_COUNT 2
 146          
 147          #define TIME_COUNT_OFFJECT 1500  //ms
 148          #define TIME_CHECK_OBJECT  400    //ms
 149          #define OBJECT_INC_TIMES  TIME_COUNT_OFFJECT/TIME_CHECK_OBJECT  
 150          void reset_counter(){
 151   1        obj_count = 0;
 152   1      }
 153          void Process_VCNL36821S(void) {
 154   1          static UINT32 ttime = 0;
 155   1          static UINT8 error = 0;
 156   1          static UINT8 object_detected = 0;
 157   1          static UINT8 non_object_detected = NON_DETECT_COUNT;
 158   1          if (HAL_GetTick() > ttime)
 159   1          {
 160   2            ttime = HAL_GetTick() + TIME_CHECK_OBJECT;
 161   2            if(readWord(VCNL_PS_DATA,&valueps))
 162   2            {
 163   3              if(valueps > DETECT_THRESHOLD)
 164   3              {
 165   4                error = 0;
 166   4                object_detected ++;
 167   4                if(object_detected == OBJECT_INC_TIMES)
 168   4                {
 169   5                  if (Sys_Mode == SYS_MODE_A)
 170   5                  { 
C51 COMPILER V9.60.7.0   MAIN                                                              06/30/2023 21:32:08 PAGE 4   

 171   6                    obj_count ++;
 172   6                  }
 173   5                }
 174   4                if(object_detected > OBJECT_INC_TIMES)
 175   4                {
 176   5                  object_detected = OBJECT_INC_TIMES+1;
 177   5                }
 178   4              } else if(object_detected){
 179   4                  non_object_detected --;
 180   4                  if(!non_object_detected){
 181   5                    object_detected = 0;
 182   5                    non_object_detected = NON_DETECT_COUNT;
 183   5                  }
 184   4              }
 185   3            }
 186   2            else { 
 187   3              error++;
 188   3              if(error == 5){
 189   4                
 190   4              }
 191   3            }
 192   2            
 193   2          }
 194   1      }
 195          
 196          void GPIO_Init()
 197          {
 198   1        //P0.7 input
 199   1          P0M1 |= 0x80;
 200   1          P0M2 &= 0x7F;
 201   1      }
 202          typedef enum{
 203            BTN_IDLE  = 0,
 204            BTN_DEBOUND,
 205            BTN_CLICKED,
 206            BTN_PRESSED2S,
 207            BTN_PRESSED2_5S,
 208            BTN_PRESSED3S,
 209            BTN_RELEASE
 210          }_btn_state;
 211          
 212          void btn_time_2sec_callback()
 213          {
 214   1        if (Sys_Mode == SYS_MODE_B){
 215   2          reset_counter();
 216   2        }
 217   1      }
 218          void btn_time_2_5sec_callback()
 219          {
 220   1        if (Sys_Mode == SYS_MODE_A){
 221   2          system_shutdown();
 222   2        }
 223   1      }
 224          void btn_time_3sec_callback()
 225          {
 226   1        if (Sys_Mode == SYS_MODE_B){
 227   2          system_shutdown();
 228   2        }
 229   1      }
 230          void BTN_process()
 231          {
 232   1        static UINT32 btn_time = 0;
C51 COMPILER V9.60.7.0   MAIN                                                              06/30/2023 21:32:08 PAGE 5   

 233   1        static _btn_state btn_state= BTN_IDLE;
 234   1        if(BUTTON_PRESSED) {
 235   2          switch(btn_state) {
 236   3            case BTN_IDLE:
 237   3                btn_state = BTN_DEBOUND;
 238   3                btn_time = HAL_GetTick() +25;
 239   3              break;
 240   3            case BTN_DEBOUND:
 241   3              if(HAL_GetTick() >btn_time){
 242   4                  btn_state = BTN_PRESSED2S;
 243   4                  btn_time = HAL_GetTick() +2000 ;
 244   4              }
 245   3              break;
 246   3            case BTN_PRESSED2S:
 247   3              if(HAL_GetTick() >btn_time){
 248   4                  btn_time_2sec_callback();
 249   4                  btn_state = BTN_PRESSED2_5S;
 250   4                  btn_time = HAL_GetTick() +500 ;
 251   4              }
 252   3              break;
 253   3            case BTN_PRESSED2_5S:
 254   3              if(HAL_GetTick() >btn_time){
 255   4                  btn_time_2_5sec_callback();
 256   4                  btn_state = BTN_PRESSED3S;
 257   4                  btn_time = HAL_GetTick() +500 ;
 258   4              }
 259   3              break;
 260   3            case BTN_PRESSED3S:
 261   3              if(HAL_GetTick() >btn_time){
 262   4                btn_time_3sec_callback();
 263   4              }
 264   3              break;
 265   3            case BTN_RELEASE:
 266   3              {
 267   4                
 268   4              }
 269   3              break;
 270   3            default:
 271   3              break;
 272   3          }
 273   2        } else {
 274   2          switch(btn_state)
 275   2          {
 276   3            case BTN_PRESSED2S:
 277   3              if (Sys_Mode == SYS_MODE_B){
 278   4                obj_count ++;
 279   4              }
 280   3              break;
 281   3          }
 282   2          btn_state = BTN_IDLE;
 283   2        }
 284   1      }
 285          
 286          void PinInterrupt_ISR (void) interrupt 7 
 287          {
 288   1        _push_(SFRS);
 289   1        
 290   1          SFRS = 0;
 291   1          switch(PIF)
 292   1          {
 293   2          case (SET_BIT7):{
 294   3                PIF&=CLR_BIT7; 
C51 COMPILER V9.60.7.0   MAIN                                                              06/30/2023 21:32:08 PAGE 6   

 295   3                break;
 296   3          } 
 297   2          default: break;
 298   2          }
 299   1      
 300   1        _pop_(SFRS);
 301   1      }
 302          
 303          void check_non_obj_detect_timout(void)
 304          {
 305   1        static UINT16 old_obj_count = 0xFFFF; // dif obj_count
 306   1        static xdata UINT32 timout =0;
 307   1        if(old_obj_count != obj_count)
 308   1        {
 309   2          timout = HAL_GetTick() + TIMOUT_NON_DETECT_OBJ;
 310   2          old_obj_count =obj_count;
 311   2        }
 312   1        if(HAL_GetTick() > timout)
 313   1        {
 314   2          system_shutdown();
 315   2        }
 316   1        
 317   1      }
 318          
 319          _Sys_Mode Check_system_mode()
 320          {
 321   1        if(IS_SYS_RUN_MOD_A)
 322   1        {
 323   2          return SYS_MODE_A;
 324   2        } 
 325   1        return SYS_MODE_B;
 326   1      }
 327          
 328          void WDT_ISR (void)   interrupt 10
 329          {
 330   1      _push_(SFRS);
 331   1      
 332   1        /* Config Enable WDT reset and not clear couter trig reset */
 333   1          WDT_COUNTER_CLEAR;                     /* Clear WDT counter */
 334   1          while(!(WDCON&=SET_BIT6));             /* Check for the WDT counter cleared */
 335   1          P12 = ~P12;
 336   1      
 337   1          CLEAR_WDT_INTERRUPT_FLAG;
 338   1      _pop_(SFRS);
 339   1      }
 340          
 341          
 342          void Disable_WDT_Reset_Config(void)
 343          {
 344   1        UINT8 cf0,cf1,cf2,cf3,cf4;
 345   1        
 346   1          set_CHPCON_IAPEN;
 347   1          IAPAL = 0x00;
 348   1          IAPAH = 0x00;
 349   1          IAPCN = BYTE_READ_CONFIG;
 350   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG0 data
 351   1          cf0 = IAPFD;
 352   1          IAPAL = 0x01;
 353   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG1 data
 354   1          cf1 = IAPFD;
 355   1          IAPAL = 0x02;
 356   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG2 data
C51 COMPILER V9.60.7.0   MAIN                                                              06/30/2023 21:32:08 PAGE 7   

 357   1          cf2 = IAPFD;
 358   1          IAPAL = 0x03;
 359   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG3 data
 360   1          cf3 = IAPFD;
 361   1          IAPAL = 0x04;
 362   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG4 data
 363   1          cf4 = IAPFD;
 364   1          cf4 |= 0xF0;                                      //Moidfy Storage CONFIG4 data disable WDT reset
 365   1          
 366   1          set_IAPUEN_CFUEN;  
 367   1          IAPCN = PAGE_ERASE_CONFIG;                        //Erase CONFIG all
 368   1          IAPAH = 0x00;
 369   1          IAPAL = 0x00;
 370   1          IAPFD = 0xFF;
 371   1          set_IAPTRG_IAPGO;
 372   1          
 373   1          IAPCN = BYTE_PROGRAM_CONFIG;                    //Write CONFIG
 374   1          IAPFD = cf0;
 375   1          set_IAPTRG_IAPGO;
 376   1          IAPAL = 0x01;
 377   1          IAPFD = cf1;
 378   1          set_IAPTRG_IAPGO;
 379   1          IAPAL = 0x02;
 380   1          IAPFD = cf2;
 381   1          set_IAPTRG_IAPGO;
 382   1          IAPAL = 0x03;
 383   1          IAPFD = cf3;
 384   1          set_IAPTRG_IAPGO;
 385   1          IAPAL = 0x04;
 386   1          IAPFD = cf4;
 387   1          set_IAPTRG_IAPGO;
 388   1      
 389   1          set_IAPUEN_CFUEN;
 390   1          clr_CHPCON_IAPEN;
 391   1          if (WDCON&SET_BIT3)
 392   1          {
 393   2            clr_WDCON_WDTRF;
 394   2            set_CHPCON_SWRST;
 395   2          }
 396   1      }
 397          
 398          
 399          void main(void)
 400          {
 401   1        UINT16 id = 0;
 402   1        UINT32 ttime = 0;
 403   1        ALL_GPIO_INPUT_MODE;
 404   1        MODIFY_HIRC(HIRC_16);
 405   1        /* Initial I2C function */
 406   1        CKDIV = 4;
 407   1        Sys_Mode = Check_system_mode();
 408   1        
 409   1        Init_I2C();
 410   1        LCD_INIT();
 411   1        Timer3_INT_Initial(DIV2, 0xFC, 0x18);
 412   1        if (Sys_Mode == SYS_MODE_A){
 413   2        VCNL_initialize();
 414   2        } else {
 415   2          VCNL36821_Stop();
 416   2        }
 417   1        GPIO_Init();
 418   1        
C51 COMPILER V9.60.7.0   MAIN                                                              06/30/2023 21:32:08 PAGE 8   

 419   1        
 420   1      //    WDT_TIMEOUT_800MS;                     /* Setting WDT time out */
 421   1      ////    ENABLE_WDT_INTERRUPT;
 422   1      ////    WDT_RUN_IN_POWERDOWN_DISABLE;
 423   1      ////    WDT_RUN_IN_POWERDOWN_ENABLE;
 424   1      ////    ENABLE_GLOBAL_INTERRUPT;
 425   1      //    WDT_COUNTER_RUN;                       /* WDT start to run */
 426   1      //    WDT_COUNTER_CLEAR;                     /* Clear WDT counter */
 427   1        while (1)
 428   1        {
 429   2      //    WDT_COUNTER_CLEAR;                     /* Clear WDT counter */
 430   2          BTN_process();
 431   2          if (Sys_Mode == SYS_MODE_A){
 432   3            Process_VCNL36821S();
 433   3          }
 434   2          LCD_show(obj_count);
 435   2          check_non_obj_detect_timout();
 436   2        }
 437   1        /* =================== */
 438   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1759    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     39      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
