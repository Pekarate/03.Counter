C51 COMPILER V9.60.7.0   MAIN                                                              07/29/2023 17:55:03 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Output\main.obj
COMPILER INVOKED BY: D:\00.SOFTWARE\03.KeilcC51\C51\BIN\C51.EXE ..\src\main.c LARGE OMF2 OPTIMIZE(7,SPEED) BROWSE INCDIR
                    -(..\Library\Device\Include;..\Library\StdDriver\inc;..\inc) DEFINE(CLOCK=4000000) DEBUG PRINT(.\lst\main.lst) TABS(2) OB
                    -JECT(.\Output\main.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2020 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          
   8          
   9          #include "MS51_16K.H"
  10          #include "htim.h"
  11          #include "vcnl36821s.h"
  12          
  13          typedef enum
  14          {
  15            SYS_MODE_A = 0,
  16            SYS_MODE_B
  17          } _Sys_Mode;
  18          
  19          UINT8 LCD_CODE[] = {0x7E, 0x48, 0x3D, 0x6D, 0x4B, 0x67, 0x77, 0x4C, 0x7F, 0x6F, 0x5F, 0x00, 0x00, 0x00, 0x
             -00, 0x00};
  20          #define LCD_DOT 0x80
  21          
  22          #define LCD_PWM_ON P05 = 1
  23          #define LCD_PWM_OFF P05 = 0
  24          
  25          #define LCD_SCK_HIGH P04 = 1
  26          #define LCD_SCK_LOW P04 = 0
  27          
  28          #define LCD_LAT_HIGH P03 = 1
  29          #define LCD_LAT_LOW P03 = 0
  30          
  31          #define LCD_DATA P01
  32          #define LCD_DATA_HIGH P01 = 1
  33          #define LCD_DATA_LOW P01 = 0
  34          
  35          #define BUTTON_PRESSED !P07
  36          #define IS_SYS_RUN_MOD_A  P30
  37          #define TIMOUT_NON_DETECT_OBJ 1800000    //ms 
  38          
  39          UINT16 valueps;
  40          UINT16 obj_count = 0;
  41          
  42          void LCD_show(UINT16 count);
  43          
  44          void system_shutdown(){
  45   1        VCNL36821_Stop();
  46   1        BOD_DISABLE;
C51 COMPILER V9.60.7.0   MAIN                                                              07/29/2023 17:55:03 PAGE 2   

  47   1        ALL_GPIO_INPUT_MODE;
  48   1        ENABLE_BIT7_FALLINGEDGE_TRIG;
  49   1        ENABLE_PIN_INTERRUPT;
  50   1        ENABLE_GLOBAL_INTERRUPT;
  51   1        while(1)
  52   1        {
  53   2          HAL_TIM_Pause();
  54   2          LCD_PWM_OFF;
  55   2          set_PCON_PD;
  56   2          HAL_TIM_run();
  57   2          HAL_Delay(150);
  58   2          if(BUTTON_PRESSED){   //debound buton
  59   3            while(BUTTON_PRESSED);
  60   3            break;
  61   3          }
  62   2        }
  63   1        set_SWRST;
  64   1        
  65   1      }
  66          void LCD_INIT()
  67          {
  68   1        // P05 LCD_PW out
  69   1        // P04 LCD_SCK out
  70   1        // P03 LCD_LAT out
  71   1        // P01 LCD_DATA out
  72   1        P0M1 &= 0xC5;  // 0b11000101;
  73   1        P0M2 |= ~0xC5; // 0b00111010;
  74   1        LCD_PWM_ON;
  75   1        LCD_SCK_LOW;
  76   1        LCD_LAT_LOW;
  77   1        LCD_DATA_LOW;
  78   1      }
  79          void LCD_Delay(UINT8 dl)
  80          {
  81   1        int i;
  82   1        for (i = 0; i < dl; i++)
  83   1        {
  84   2        }
  85   1      }
  86          
  87          void LCD_send_bytes(UINT8 *dt)
  88          {
  89   1        INT8 i, j;
  90   1        LCD_LAT_LOW;
  91   1        for (i = 2; i >= 0; i--)
  92   1        {
  93   2          for (j = 7; j >= 0; j--)
  94   2          {
  95   3            LCD_SCK_LOW;
  96   3            LCD_DATA = ((dt[i] >> j) & 0x01);
  97   3            LCD_Delay(5);
  98   3            LCD_SCK_HIGH;
  99   3            LCD_Delay(5);
 100   3          }
 101   2        }
 102   1        LCD_LAT_HIGH;
 103   1        LCD_Delay(10);
 104   1        LCD_LAT_LOW;
 105   1      }
 106          
 107          
 108          _Sys_Mode Sys_Mode = SYS_MODE_B;
C51 COMPILER V9.60.7.0   MAIN                                                              07/29/2023 17:55:03 PAGE 3   

 109          void LCD_show(UINT16 count)
 110          {
 111   1        UINT8 lcd_data[3];
 112   1        if (0)
 113   1        {
 114   2          count = (count % 198);
 115   2          lcd_data[0] = LCD_CODE[(count + 1) / 20];
 116   2          lcd_data[1] = LCD_CODE[(((count + 1) / 2) % 10)] + LCD_DOT;
 117   2          lcd_data[2] = LCD_CODE[0];
 118   2          if (count)
 119   2          {
 120   3            lcd_data[2] = LCD_CODE[2];
 121   3            if (count % 2)
 122   3            {
 123   4              lcd_data[2] = LCD_CODE[1];
 124   4            }
 125   3          }
 126   2        }
 127   1        else
 128   1        {
 129   2          UINT16 count_tmp = (count % 1000);
 130   2          lcd_data[2] = LCD_CODE[count_tmp % 10];
 131   2          lcd_data[1] = LCD_CODE[(count_tmp / 10) % 10];
 132   2          lcd_data[0] = LCD_CODE[count_tmp / 100];
 133   2        }
 134   1        if(count > 4000) {
 135   2          lcd_data[0] += LCD_DOT; 
 136   2          lcd_data[1] += LCD_DOT;
 137   2        } else if(count > 3000) {
 138   2          lcd_data[1] += LCD_DOT; 
 139   2        } else if(count > 2000){
 140   2          lcd_data[2] += LCD_DOT; 
 141   2        } else if(count > 1000)
 142   1        {
 143   2          lcd_data[0] += LCD_DOT; 
 144   2        }
 145   1        
 146   1        LCD_send_bytes(lcd_data);
 147   1        LCD_Delay(10);
 148   1        lcd_data[0] = lcd_data[1] = lcd_data[2] = 0x00;
 149   1        LCD_send_bytes(lcd_data);
 150   1        LCD_Delay(10);
 151   1      }
 152          
 153          
 154          
 155          #define DETECT_THRESHOLD  155
 156          #define NON_DETECT_COUNT 2
 157          
 158          #define TIME_COUNT_OFFJECT 1500  //ms
 159          #define TIME_CHECK_OBJECT  300    //ms
 160          #define OBJECT_INC_TIMES  TIME_COUNT_OFFJECT/TIME_CHECK_OBJECT  
 161          
 162          static UINT32 ttime = 0;
 163          static UINT8 error = 0;
 164          static UINT8 object_detected = 0;
 165          static UINT8 non_object_detected = NON_DETECT_COUNT;
 166          
 167          void reset_counter(){
 168   1        ttime = HAL_GetTick() + 500;
 169   1        object_detected = 0;
 170   1        obj_count = 0;
C51 COMPILER V9.60.7.0   MAIN                                                              07/29/2023 17:55:03 PAGE 4   

 171   1      }
 172          
 173          void Process_VCNL36821S(void) {
 174   1          
 175   1          if (HAL_GetTick() > ttime)
 176   1          {
 177   2            ttime = HAL_GetTick() + TIME_CHECK_OBJECT;
 178   2            if(readWord(VCNL_PS_DATA,&valueps))
 179   2            {
 180   3              if(valueps > DETECT_THRESHOLD)
 181   3              {
 182   4                error = 0;
 183   4                object_detected ++;
 184   4                if(object_detected == OBJECT_INC_TIMES)
 185   4                {
 186   5                  if (Sys_Mode == SYS_MODE_A)
 187   5                  { 
 188   6                    obj_count ++;
 189   6                  }
 190   5                }
 191   4                if(object_detected > OBJECT_INC_TIMES)
 192   4                {
 193   5                  object_detected = OBJECT_INC_TIMES+1;
 194   5                }
 195   4              } else if(object_detected){
 196   4                  non_object_detected --;
 197   4                  if(!non_object_detected){
 198   5                    object_detected = 0;
 199   5                    non_object_detected = NON_DETECT_COUNT;
 200   5                  }
 201   4              }
 202   3            }
 203   2            else { 
 204   3              error++;
 205   3              if(error == 5){
 206   4                
 207   4              }
 208   3            }
 209   2            
 210   2          }
 211   1      }
 212          
 213          void GPIO_Init()
 214          {
 215   1        //P0.7 input
 216   1          P0M1 |= 0x80;
 217   1          P0M2 &= 0x7F;
 218   1      }
 219          typedef enum{
 220            BTN_IDLE  = 0,
 221            BTN_DEBOUND,
 222            BTN_CLICKED,
 223            BTN_PRESSED2S,
 224            BTN_PRESSED2_5S,
 225            BTN_PRESSED3S,
 226            BTN_RELEASE
 227          }_btn_state;
 228          
 229          void btn_time_click_callback()
 230          {
 231   1        if (Sys_Mode == SYS_MODE_A){
 232   2          reset_counter();
C51 COMPILER V9.60.7.0   MAIN                                                              07/29/2023 17:55:03 PAGE 5   

 233   2        }
 234   1      }
 235          void btn_time_2sec_callback()
 236          {
 237   1        if (Sys_Mode == SYS_MODE_B){
 238   2          reset_counter();
 239   2        }
 240   1      }
 241          void btn_time_2_5sec_callback()
 242          {
 243   1        if (Sys_Mode == SYS_MODE_A){
 244   2          system_shutdown();
 245   2        }
 246   1      }
 247          void btn_time_3sec_callback()
 248          {
 249   1        if (Sys_Mode == SYS_MODE_B){
 250   2          system_shutdown();
 251   2        }
 252   1      }
 253          void BTN_process()
 254          {
 255   1        static UINT32 btn_time = 0;
 256   1        static _btn_state btn_state= BTN_IDLE;
 257   1        if(BUTTON_PRESSED) {
 258   2          switch(btn_state) {
 259   3            case BTN_IDLE:
 260   3                btn_state = BTN_DEBOUND;
 261   3                btn_time = HAL_GetTick() +25;
 262   3              break;
 263   3            case BTN_DEBOUND:
 264   3              if(HAL_GetTick() >btn_time){
 265   4                  btn_state = BTN_PRESSED2S;
 266   4      //            btn_time_click_callback();
 267   4                  btn_time = HAL_GetTick() +2000 ;
 268   4              }
 269   3              break;
 270   3            case BTN_PRESSED2S:
 271   3              if(HAL_GetTick() >btn_time){
 272   4                  btn_time_2sec_callback();
 273   4                  btn_state = BTN_PRESSED2_5S;
 274   4                  btn_time = HAL_GetTick() +500 ;
 275   4              }
 276   3              break;
 277   3            case BTN_PRESSED2_5S:
 278   3              if(HAL_GetTick() >btn_time){
 279   4                  btn_time_2_5sec_callback();
 280   4                  btn_state = BTN_PRESSED3S;
 281   4                  btn_time = HAL_GetTick() +500 ;
 282   4              }
 283   3              break;
 284   3            case BTN_PRESSED3S:
 285   3              if(HAL_GetTick() >btn_time){
 286   4                btn_time_3sec_callback();
 287   4              }
 288   3              break;
 289   3            case BTN_RELEASE:
 290   3              {
 291   4                
 292   4              }
 293   3              break;
 294   3            default:
C51 COMPILER V9.60.7.0   MAIN                                                              07/29/2023 17:55:03 PAGE 6   

 295   3              break;
 296   3          }
 297   2        } else {
 298   2          switch(btn_state)
 299   2          {
 300   3            case BTN_PRESSED2S:
 301   3              if (Sys_Mode == SYS_MODE_B){
 302   4                obj_count ++;
 303   4              } else if (Sys_Mode == SYS_MODE_A){
 304   4                reset_counter();
 305   4              } 
 306   3      
 307   3              break;
 308   3          }
 309   2          btn_state = BTN_IDLE;
 310   2        }
 311   1      }
 312          
 313          void PinInterrupt_ISR (void) interrupt 7 
 314          {
 315   1        _push_(SFRS);
 316   1        
 317   1          SFRS = 0;
 318   1          switch(PIF)
 319   1          {
 320   2          case (SET_BIT7):{
 321   3                PIF&=CLR_BIT7; 
 322   3                break;
 323   3          } 
 324   2          default: break;
 325   2          }
 326   1      
 327   1        _pop_(SFRS);
 328   1      }
 329          
 330          void check_non_obj_detect_timout(void)
 331          {
 332   1        static UINT16 old_obj_count = 0xFFFF; // dif obj_count
 333   1        static xdata UINT32 timout =0;
 334   1        if(old_obj_count != obj_count)
 335   1        {
 336   2          timout = HAL_GetTick() + TIMOUT_NON_DETECT_OBJ;
 337   2          old_obj_count =obj_count;
 338   2        }
 339   1        if(HAL_GetTick() > timout)
 340   1        {
 341   2          system_shutdown();
 342   2        }
 343   1        
 344   1      }
 345          
 346          _Sys_Mode Check_system_mode()
 347          {
 348   1        if(IS_SYS_RUN_MOD_A)
 349   1        {
 350   2          return SYS_MODE_A;
 351   2        } 
 352   1        return SYS_MODE_B;
 353   1      }
 354          
 355          void WDT_ISR (void)   interrupt 10
 356          {
C51 COMPILER V9.60.7.0   MAIN                                                              07/29/2023 17:55:03 PAGE 7   

 357   1      _push_(SFRS);
 358   1      
 359   1        /* Config Enable WDT reset and not clear couter trig reset */
 360   1          WDT_COUNTER_CLEAR;                     /* Clear WDT counter */
 361   1          while(!(WDCON&=SET_BIT6));             /* Check for the WDT counter cleared */
 362   1          P12 = ~P12;
 363   1      
 364   1          CLEAR_WDT_INTERRUPT_FLAG;
 365   1      _pop_(SFRS);
 366   1      }
 367          
 368          
 369          void Disable_WDT_Reset_Config(void)
 370          {
 371   1        UINT8 cf0,cf1,cf2,cf3,cf4;
 372   1        
 373   1          set_CHPCON_IAPEN;
 374   1          IAPAL = 0x00;
 375   1          IAPAH = 0x00;
 376   1          IAPCN = BYTE_READ_CONFIG;
 377   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG0 data
 378   1          cf0 = IAPFD;
 379   1          IAPAL = 0x01;
 380   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG1 data
 381   1          cf1 = IAPFD;
 382   1          IAPAL = 0x02;
 383   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG2 data
 384   1          cf2 = IAPFD;
 385   1          IAPAL = 0x03;
 386   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG3 data
 387   1          cf3 = IAPFD;
 388   1          IAPAL = 0x04;
 389   1          set_IAPTRG_IAPGO;                                  //Storage CONFIG4 data
 390   1          cf4 = IAPFD;
 391   1          cf4 |= 0xF0;                                      //Moidfy Storage CONFIG4 data disable WDT reset
 392   1          
 393   1          set_IAPUEN_CFUEN;  
 394   1          IAPCN = PAGE_ERASE_CONFIG;                        //Erase CONFIG all
 395   1          IAPAH = 0x00;
 396   1          IAPAL = 0x00;
 397   1          IAPFD = 0xFF;
 398   1          set_IAPTRG_IAPGO;
 399   1          
 400   1          IAPCN = BYTE_PROGRAM_CONFIG;                    //Write CONFIG
 401   1          IAPFD = cf0;
 402   1          set_IAPTRG_IAPGO;
 403   1          IAPAL = 0x01;
 404   1          IAPFD = cf1;
 405   1          set_IAPTRG_IAPGO;
 406   1          IAPAL = 0x02;
 407   1          IAPFD = cf2;
 408   1          set_IAPTRG_IAPGO;
 409   1          IAPAL = 0x03;
 410   1          IAPFD = cf3;
 411   1          set_IAPTRG_IAPGO;
 412   1          IAPAL = 0x04;
 413   1          IAPFD = cf4;
 414   1          set_IAPTRG_IAPGO;
 415   1      
 416   1          set_IAPUEN_CFUEN;
 417   1          clr_CHPCON_IAPEN;
 418   1          if (WDCON&SET_BIT3)
C51 COMPILER V9.60.7.0   MAIN                                                              07/29/2023 17:55:03 PAGE 8   

 419   1          {
 420   2            clr_WDCON_WDTRF;
 421   2            set_CHPCON_SWRST;
 422   2          }
 423   1      }
 424          
 425          
 426          void main(void)
 427          {
 428   1        UINT16 id = 0;
 429   1        UINT32 ttime = 0;
 430   1        ALL_GPIO_INPUT_MODE;
 431   1        MODIFY_HIRC(HIRC_16);
 432   1        /* Initial I2C function */
 433   1        CKDIV = 4;    //2Mhz 16/(CKDIV*2) 
 434   1        Sys_Mode = Check_system_mode();
 435   1        Init_I2C();
 436   1        LCD_INIT();
 437   1        Timer3_INT_Initial(DIV2, 0xFC, 0x18);
 438   1        if (Sys_Mode == SYS_MODE_A){
 439   2        VCNL_initialize();
 440   2        } else {
 441   2          VCNL36821_Stop();
 442   2        }
 443   1        GPIO_Init();
 444   1        
 445   1        
 446   1      //    WDT_TIMEOUT_800MS;                     /* Setting WDT time out */
 447   1      ////    ENABLE_WDT_INTERRUPT;
 448   1      ////    WDT_RUN_IN_POWERDOWN_DISABLE;
 449   1      ////    WDT_RUN_IN_POWERDOWN_ENABLE;
 450   1      ////    ENABLE_GLOBAL_INTERRUPT;
 451   1      //    WDT_COUNTER_RUN;                       /* WDT start to run */
 452   1      //    WDT_COUNTER_CLEAR;                     /* Clear WDT counter */
 453   1        while (1)
 454   1        {
 455   2      //    WDT_COUNTER_CLEAR;                     /* Clear WDT counter */
 456   2          BTN_process();
 457   2      //    I2C_reset();
 458   2          if (Sys_Mode == SYS_MODE_A){
 459   3            Process_VCNL36821S();
 460   3          }
 461   2          if(Sys_Mode != Check_system_mode())
 462   2          {
 463   3            set_SWRST;
 464   3          }
 465   2          LCD_show(valueps);
 466   2          check_non_obj_detect_timout();
 467   2        }
 468   1        /* =================== */
 469   1      }
*** WARNING C294 IN LINE 114 OF ..\src\main.c: unreachable code


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1817    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     39      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.60.7.0   MAIN                                                              07/29/2023 17:55:03 PAGE 9   

   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
